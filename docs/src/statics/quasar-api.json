[
  {
    "name": "BottomSheet",
    "imports": [
      "QDialog",
      "QIcon",
      "QSeparator",
      "QCard",
      "QCardSection",
      "QItem",
      "QItemSection"
    ],
    "related": [
      "Dialog",
      "QDialog"
    ],
    "group": "QDialogBottomSheet",
    "api": {
      "type": "plugin",
      "injection": "$q.bottomSheet",
      "methods": {
        "create": {
          "desc": "Creates an ad-hoc Bottom Sheet; Same as calling $q.bottomSheet(...)",
          "params": {
            "opts": {
              "type": "Object",
              "required": true,
              "definition": {
                "class": {
                  "type": [
                    "String",
                    "Array",
                    "Object"
                  ],
                  "desc": "CSS Class name to apply to the Dialog's QCard",
                  "examples": [
                    "my-class"
                  ]
                },
                "style": {
                  "type": [
                    "String",
                    "Array",
                    "Object"
                  ],
                  "desc": "CSS style to apply to the Dialog's QCard",
                  "examples": [
                    "border: 2px solid black"
                  ]
                },
                "title": {
                  "type": "String",
                  "desc": "Title",
                  "examples": [
                    "Share"
                  ]
                },
                "message": {
                  "type": "String",
                  "desc": "Message",
                  "examples": [
                    "Please select how to share"
                  ]
                },
                "actions": {
                  "type": "Array",
                  "desc": "Array of Objects, each Object defining an action",
                  "definition": {
                    "classes": {
                      "type": [
                        "String",
                        "Array",
                        "Object"
                      ],
                      "desc": "CSS classes for this action",
                      "examples": [
                        "my-class"
                      ]
                    },
                    "icon": {
                      "type": "String",
                      "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
                      "examples": [
                        "map",
                        "ion-add",
                        "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
                        "img:statics/path/to/some_image.png"
                      ],
                      "category": "content"
                    },
                    "img": {
                      "type": "String",
                      "desc": "Path to an image for this action",
                      "examples": [
                        "(statics folder) statics/img/something.png",
                        "(relative path format) :src=\"require('./my_img.jpg')\"",
                        "(URL) https://some-site.net/some-img.gif"
                      ]
                    },
                    "avatar": {
                      "type": "Boolean",
                      "desc": "Display img as avatar (round borders)"
                    },
                    "label": {
                      "type": [
                        "String",
                        "Number"
                      ],
                      "desc": "Action label",
                      "examples": [
                        "Facebook"
                      ]
                    }
                  }
                },
                "grid": {
                  "type": "Boolean",
                  "desc": "Display actions as a grid instead of as a list"
                },
                "dark": {
                  "type": "Boolean",
                  "desc": "Apply dark mode",
                  "category": "style"
                },
                "seamless": {
                  "type": "Boolean",
                  "desc": "Put Bottom Sheet into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too"
                },
                "persistent": {
                  "type": "Boolean",
                  "desc": "User cannot dismiss Bottom Sheet if clicking outside of it or hitting ESC key"
                }
              },
              "desc": "Bottom Sheet options"
            }
          },
          "returns": {
            "type": "Object",
            "desc": "Chainable Object",
            "definition": {
              "onOk": {
                "type": "Function",
                "desc": "Receives a Function param to tell what to do when OK is pressed / option is selected",
                "params": {
                  "callbackFn": {
                    "type": "Function",
                    "desc": "Tell what to do",
                    "params": null,
                    "returns": null
                  }
                },
                "returns": {
                  "type": "Object",
                  "desc": "Chained Object"
                }
              },
              "onCancel": {
                "type": "Function",
                "desc": "Receives a Function as param to tell what to do when Cancel is pressed / dialog is dismissed",
                "params": {
                  "callbackFn": {
                    "type": "Function",
                    "desc": "Tell what to do",
                    "params": null,
                    "returns": null
                  }
                },
                "returns": {
                  "type": "Object",
                  "desc": "Chained Object"
                }
              },
              "onDismiss": {
                "type": "Function",
                "desc": "Receives a Function param to tell what to do when the dialog is closed",
                "params": {
                  "callbackFn": {
                    "type": "Function",
                    "desc": "Tell what to do",
                    "params": null,
                    "returns": null
                  }
                },
                "returns": {
                  "type": "Object",
                  "desc": "Chained Object"
                }
              },
              "hide": {
                "type": "Function",
                "desc": "Hides the dialog when called",
                "params": null,
                "returns": {
                  "type": "Object",
                  "desc": "Chained Object"
                }
              }
            }
          },
          "injectionPoint": true
        }
      },
      "docs": {
        "page": "bottom-sheet",
        "route": "quasar-plugins",
        "apiAnchor": "BottomSheet-API"
      }
    },
    "description": "Bottom Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Bottom Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.\nThe Bottom Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Bottom Sheet options.\nBottom Sheets can be displayed as a list or as a grid, with icons or with avatars. They can be used either as a component in your Vue file templates, or as a globally available method."
  },
  {
    "name": "QAvatar",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QAvatar",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "font-size": {
          "type": "String",
          "desc": "The size in CSS units, including unit name, of the content (icon, text)",
          "examples": [
            "18px",
            "2rem"
          ],
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "square": {
          "type": "Boolean",
          "desc": "Removes border-radius so borders are squared",
          "category": "style"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a small standard border-radius for a squared shape of the component",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Optional; Suggestions: one character string, <img> tag"
        }
      },
      "docs": {
        "page": "avatar",
        "route": "vue-components",
        "apiAnchor": "QAvatar-API"
      }
    },
    "description": "The QAvatar component creates a scalable, color-able element that can have text, icon or image within its shape. By default it is circular, but it can also be square or have a border-radius applied to give rounded corners to the square shape.\nIt is often used with other components in their slots."
  },
  {
    "name": "QBreadcrumbsEl",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QBreadcrumbs",
    "api": {
      "type": "component",
      "docs": {
        "page": "breadcrumbs",
        "route": "vue-components",
        "apiAnchor": "QBreadcrumbsEl-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "behavior"
        },
        "exact": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'exact' property",
          "category": "behavior"
        },
        "append": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'append' property",
          "category": "behavior"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "behavior"
        },
        "active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-active-class"
          ],
          "category": "behavior"
        },
        "exact-active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-exact-active-class"
          ],
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "label": {
          "type": "String",
          "desc": "The label text for the breadcrumb",
          "examples": [
            "Home",
            "Index"
          ],
          "category": "content"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where custom content goes, unless 'icon' and 'label' props are not enough"
        }
      }
    },
    "description": "The QBreadcrumbs component is used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites. Most common use is it's in a [QToolbar](/vue-components/toolbar), but it's not limited to it."
  },
  {
    "name": "QBtn",
    "imports": [
      "QIcon",
      "QSpinner"
    ],
    "related": [
      "QBtnGroup",
      "QBtnDropdown",
      "QBtnToggle"
    ],
    "group": "QBtn",
    "api": {
      "type": "component",
      "docs": {
        "page": "button",
        "route": "vue-components",
        "apiAnchor": "QBtn-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "type": {
          "type": "String",
          "desc": "Define the button HTML DOM type",
          "values": [
            "a",
            "submit",
            "button",
            "reset"
          ],
          "examples": [
            ":type=\"a\" href=\"http://some-site.net\" target=\"__blank\""
          ],
          "category": "general"
        },
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "router"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "router"
        },
        "label": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "The text that will be shown on the button",
          "examples": [
            "Button Label"
          ],
          "category": "content"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "icon-right": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "round": {
          "type": "Boolean",
          "desc": "Makes a circle shaped button",
          "category": "style"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design",
          "category": "style"
        },
        "unelevated": {
          "type": "Boolean",
          "desc": "Remove shadow",
          "category": "style"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a more prominent border-radius for a squared shape button",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design",
          "category": "style"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Applies a glossy effect",
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Button size name or a CSS unit including unit name",
          "examples": [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
            "25px",
            "2rem"
          ],
          "category": "style"
        },
        "fab": {
          "type": "Boolean",
          "desc": "Makes button size and shape to fit a Floating Action Button",
          "category": "style"
        },
        "fab-mini": {
          "type": "Boolean",
          "desc": "Makes button size and shape to fit a small Floating Action Button",
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Avoid turning label text into caps (which happens by default)",
          "category": "content"
        },
        "no-wrap": {
          "type": "Boolean",
          "desc": "Avoid label text wrapping",
          "category": "content"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "align": {
          "type": "String",
          "desc": "Label or content alignment",
          "default": "center",
          "values": [
            "left",
            "right",
            "center",
            "around",
            "between"
          ],
          "category": "content"
        },
        "stack": {
          "type": "Boolean",
          "desc": "Stack icon and label vertically instead of on same line (like it is by default)",
          "category": "content"
        },
        "stretch": {
          "type": "Boolean",
          "desc": "When used on flexbox parent, button will stretch to parent's height",
          "category": "content"
        },
        "loading": {
          "type": "Boolean",
          "desc": "Put button into loading state (displays a QSpinner -- can be overriden by using a 'loading' slot)",
          "category": "behavior|content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "percentage": {
          "type": "Number",
          "desc": "Percentage (0.0 < x < 100.0); To be used along 'loading' prop; Display a progress bar on the background",
          "examples": [
            23
          ],
          "category": "behavior"
        },
        "dark-percentage": {
          "type": "Boolean",
          "desc": "Progress bar on the background should have dark color; To be used along with 'percentage' and 'loading' props",
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Use for custom content, instead of relying on 'icon' and 'label' props"
        },
        "loading": {
          "desc": "Override the default QSpinner when in 'loading' state"
        }
      }
    },
    "description": "Quasar has a component called QBtn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).\nThe button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.\nWhen not disabled or spinning, QBtn emits a `@click` event, as soon as it is clicked or tapped."
  },
  {
    "name": "QBtnDropdown",
    "imports": [
      "QIcon",
      "QBtn",
      "QBtnGroup",
      "QMenu"
    ],
    "related": [
      "QBtn",
      "QBtnGroup"
    ],
    "group": "QBtn",
    "api": {
      "type": "component",
      "docs": {
        "page": "button-dropdown",
        "route": "vue-components",
        "apiAnchor": "QBtnDropdown-API"
      },
      "props": {
        "value": {
          "type": "Boolean",
          "desc": "Controls Menu show/hidden state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "examples": [
            "v-model=\"menuState\""
          ]
        },
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "type": {
          "type": "String",
          "desc": "Define the button HTML DOM type",
          "values": [
            "a",
            "submit",
            "button",
            "reset"
          ],
          "examples": [
            ":type=\"a\" href=\"http://some-site.net\" target=\"__blank\""
          ],
          "category": "general"
        },
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "router"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "router"
        },
        "label": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "The text that will be shown on the button",
          "examples": [
            "Button Label"
          ],
          "category": "content"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "icon-right": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "round": {
          "type": "Boolean",
          "desc": "Makes a circle shaped button",
          "category": "style"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design",
          "category": "style"
        },
        "unelevated": {
          "type": "Boolean",
          "desc": "Remove shadow",
          "category": "style"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a more prominent border-radius for a squared shape button",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design",
          "category": "style"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Applies a glossy effect",
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Button size name or a CSS unit including unit name",
          "examples": [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
            "25px",
            "2rem"
          ],
          "category": "style"
        },
        "fab": {
          "type": "Boolean",
          "desc": "Makes button size and shape to fit a Floating Action Button",
          "category": "style"
        },
        "fab-mini": {
          "type": "Boolean",
          "desc": "Makes button size and shape to fit a small Floating Action Button",
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Avoid turning label text into caps (which happens by default)",
          "category": "content"
        },
        "no-wrap": {
          "type": "Boolean",
          "desc": "Avoid label text wrapping",
          "category": "content"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "align": {
          "type": "String",
          "desc": "Label or content alignment",
          "default": "center",
          "values": [
            "left",
            "right",
            "center",
            "around",
            "between"
          ],
          "category": "content"
        },
        "stack": {
          "type": "Boolean",
          "desc": "Stack icon and label vertically instead of on same line (like it is by default)",
          "category": "content"
        },
        "stretch": {
          "type": "Boolean",
          "desc": "When used on flexbox parent, button will stretch to parent's height",
          "category": "content"
        },
        "loading": {
          "type": "Boolean",
          "desc": "Put button into loading state (displays a QSpinner -- can be overriden by using a 'loading' slot)",
          "category": "behavior|content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "split": {
          "type": "Boolean",
          "desc": "Split dropdown icon into its own button",
          "category": "content|behavior"
        },
        "disable-main-btn": {
          "type": "Boolean",
          "desc": "Disable main button (useful along with 'split' prop)",
          "category": "behavior"
        },
        "disable-dropdown": {
          "type": "Boolean",
          "desc": "Disables dropdown (dropdown button if using along 'split' prop)",
          "category": "behavior"
        },
        "content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the menu",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "content-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the menu",
          "examples": [
            "my-special-class",
            ":content-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "cover": {
          "type": "Boolean",
          "desc": "Allows the menu to cover the button. When used, the 'menu-self' and 'menu-fit' props are no longer effective",
          "category": "position"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key",
          "category": "behavior"
        },
        "auto-close": {
          "type": "Boolean",
          "desc": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap",
          "category": "behavior"
        },
        "menu-anchor": {
          "type": "String",
          "desc": "Two values setting the starting position or anchor point of the menu relative to its target",
          "values": [
            "top left",
            "top middle",
            "top right",
            "center left",
            "center middle",
            "center right",
            "bottom left",
            "bottom center",
            "bottom right"
          ],
          "examples": [
            "top left",
            "bottom right"
          ],
          "category": "position"
        },
        "menu-self": {
          "type": "String",
          "desc": "Two values setting the menu's own position relative to its target",
          "values": [
            "top left",
            "top middle",
            "top right",
            "center left",
            "center middle",
            "center right",
            "bottom left",
            "bottom center",
            "bottom right"
          ],
          "examples": [
            "top left",
            "bottom right"
          ],
          "category": "position"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        },
        "label": {
          "desc": "Customize main button's content through this slot, unless you're using the 'icon' and 'label' props"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "click": {
          "desc": "Emitted when user clicks/taps on the main button (not the icon one, if using 'split')",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      }
    },
    "description": "QBtnDropdown is a very convenient dropdown button. Goes very well with [QList](/vue-components/lists-and-list-items) as dropdown content, but it's by no means limited to it.\nIn case you are looking for a dropdown \"input\" instead of \"button\" use [Select](/vue-components/select) instead."
  },
  {
    "name": "QBtnGroup",
    "imports": [],
    "related": [
      "QBtn",
      "QBtnDropdown",
      "QBtnToggle"
    ],
    "group": "QBtn",
    "api": {
      "type": "component",
      "docs": {
        "page": "button-group",
        "route": "vue-components",
        "apiAnchor": "QBtnGroup-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "spread": {
          "type": "Boolean",
          "desc": "Spread horizontally to all available space",
          "category": "content"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design for buttons",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design for buttons",
          "category": "style"
        },
        "unelevated": {
          "type": "Boolean",
          "desc": "Remove shadow on buttons",
          "category": "style"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a more prominent border-radius for squared shape buttons",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design for buttons",
          "category": "style"
        },
        "stretch": {
          "type": "Boolean",
          "desc": "When used on flexbox parent, buttons will stretch to parent's height",
          "category": "content"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Applies a glossy effect",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion: QBtn"
        }
      }
    },
    "description": "You can conveniently group [QBtn](/vue-components/button) and [QBtnDropdown](/vue-components/button-dropdown) using QBtnGroup. Be sure to check those component's respective pages to see their props and methods."
  },
  {
    "name": "QBtnToggle",
    "imports": [
      "QBtn",
      "QBtnGroup"
    ],
    "related": [
      "QBtn",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QOptionGroup",
      "QRadio",
      "QCheckbox",
      "QToggle"
    ],
    "group": "QBtn",
    "api": {
      "type": "component",
      "docs": {
        "page": "button-toggle",
        "route": "vue-components",
        "apiAnchor": "QBtnToggle-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "value": {
          "type": "Any",
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"selected\""
          ],
          "category": "model"
        },
        "options": {
          "type": "Array",
          "desc": "Array of Objects defining each option",
          "definition": {
            "label": {
              "type": "String",
              "desc": "Label of option button; Use this prop and/or 'icon', but at least one is required",
              "examples": [
                "Option 1"
              ]
            },
            "icon": {
              "type": "String",
              "desc": "Icon of option button; Use this prop and/or 'label', but at least one is required",
              "examples": [
                "map",
                "ion-add",
                "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
                "img:statics/path/to/some_image.png"
              ],
              "category": "content"
            },
            "value": {
              "type": "Any",
              "desc": "Value of the option that will be used by component model",
              "required": true
            },
            "slot": {
              "type": "String",
              "desc": "Slot name to use for this button content; Useful for customizing content or even add tooltips",
              "examples": [
                "mySlot"
              ]
            },
            "...props": {
              "type": "Any",
              "desc": "Any other QBtn props"
            }
          },
          "examples": [
            "[ {label: 'One', value: 'one'}, {label: 'Two', value: 'two'} ]"
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "toggle-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style",
          "default": "primary"
        },
        "toggle-text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "spread": {
          "type": "Boolean",
          "desc": "Spread horizontally to all available space",
          "category": "content"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design",
          "category": "style"
        },
        "unelevated": {
          "type": "Boolean",
          "desc": "Remove shadow",
          "category": "style"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a more prominent border-radius for a squared shape button",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design",
          "category": "style"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Applies a glossy effect",
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Button size name or a CSS unit including unit name",
          "examples": [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
            "25px",
            "2rem"
          ],
          "category": "style"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Avoid turning label text into caps (which happens by default)",
          "category": "content"
        },
        "no-wrap": {
          "type": "Boolean",
          "desc": "Avoid label text wrapping",
          "category": "content"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "stack": {
          "type": "Boolean",
          "desc": "Stack icon and label vertically instead of on same line (like it is by default)",
          "category": "content"
        },
        "stretch": {
          "type": "Boolean",
          "desc": "When used on flexbox parent, button will stretch to parent's height",
          "category": "content"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      }
    },
    "description": "The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  {
    "name": "QCard",
    "imports": [],
    "related": [
      "QSeparator"
    ],
    "group": "QCard",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "square": {
          "type": "Boolean",
          "desc": "Removes border-radius so borders are squared",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Applies a 'flat' design (no default shadow)",
          "category": "style"
        },
        "bordered": {
          "type": "Boolean",
          "desc": "Applies a default border to the component",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "docs": {
        "page": "card",
        "route": "vue-components",
        "apiAnchor": "QCard-API"
      }
    },
    "description": "The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations.\nWith so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.\nThe QCard component is intentionally lightweight and essentially a containing element that is capable of \"hosting\" any other component that is appropriate."
  },
  {
    "name": "QCardSection",
    "imports": [],
    "related": [
      "QSeparator"
    ],
    "group": "QCard",
    "api": {
      "type": "component",
      "docs": {
        "page": "card",
        "route": "vue-components",
        "apiAnchor": "QCardSection-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      }
    },
    "description": "The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations.\nWith so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.\nThe QCard component is intentionally lightweight and essentially a containing element that is capable of \"hosting\" any other component that is appropriate."
  },
  {
    "name": "QCarousel",
    "imports": [
      "QBtn"
    ],
    "related": [],
    "group": "QCarousel",
    "api": {
      "type": "component",
      "props": {
        "fullscreen": {
          "type": "Boolean",
          "sync": true,
          "desc": "Fullscreen mode",
          "examples": [
            ":fullscreen.sync=\"isFullscreen\""
          ],
          "category": "behavior"
        },
        "value": {
          "type": "Any",
          "desc": "Model of the component defining current panel's name; If used as Number, it does not defines panel index though but slide name's which may be an Integer; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"panelName\""
          ],
          "category": "model"
        },
        "animated": {
          "type": "Boolean",
          "desc": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)",
          "category": "behavior"
        },
        "infinite": {
          "type": "Boolean",
          "desc": "Makes component appear as infinite (when reaching last panel, next one will become the first one)",
          "category": "behavior"
        },
        "swipeable": {
          "type": "Boolean",
          "desc": "Enable swipe events (may interfere with content's touch/mouse events)",
          "category": "behavior"
        },
        "transition-prev": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "transition-next": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "height": {
          "type": "String",
          "desc": "Height of Carousel in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "padding": {
          "type": "Boolean",
          "desc": "Applies a default padding to each slide, according to the usage of 'arrows' and 'navigation' props",
          "category": "content"
        },
        "control-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "autoplay": {
          "type": [
            "Number",
            "Boolean"
          ],
          "desc": "Jump to next slide at fixed time intervals (in milliseconds); 'false' disables autoplay, 'true' enables it for 5000ms intervals",
          "default": false,
          "examples": [
            ":autoplay=\"2500\"",
            true,
            false
          ],
          "category": "behavior"
        },
        "arrows": {
          "type": "Boolean",
          "desc": "Show navigation arrow buttons",
          "category": "content"
        },
        "prev-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "next-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "navigation": {
          "type": "Boolean",
          "desc": "Show navigation dots",
          "category": "content"
        },
        "navigation-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "thumbnails": {
          "type": "Boolean",
          "desc": "Show thumbnails",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion: QCarouselSlide"
        },
        "control": {
          "desc": "Slot specific for QCarouselControl"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes (current panel name); Is also used by v-model",
          "params": {
            "value": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "New current panel name",
              "examples": [
                "dashboard"
              ]
            }
          }
        },
        "before-transition": {
          "desc": "Emitted before transitioning to a new panel",
          "params": {
            "newVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name towards transition is going",
              "examples": [
                "dashboard"
              ]
            },
            "oldVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name from which transition is happening",
              "examples": [
                "dashboard"
              ]
            }
          }
        },
        "transition": {
          "desc": "Emitted after component transitioned to a new panel",
          "params": {
            "newVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name towards transition has occurred",
              "examples": [
                "dashboard"
              ]
            },
            "oldVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name from which transition has happened",
              "examples": [
                "dashboard"
              ]
            }
          }
        }
      },
      "methods": {
        "toggleFullscreen": {
          "desc": "Toggle the view to be fullscreen or not fullscreen"
        },
        "setFullscreen": {
          "desc": "Enter the fullscreen view"
        },
        "exitFullscreen": {
          "desc": "Leave the fullscreen view"
        },
        "next": {
          "desc": "Go to next panel"
        },
        "previous": {
          "desc": "Go to previous panel"
        },
        "goTo": {
          "desc": "Go to specific panel",
          "params": {
            "panelName": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel's name, which may be a String or Number; Number does not refers to panel index, but to its name, which may be an Integer",
              "required": true,
              "examples": [
                "dashboard"
              ]
            }
          }
        }
      },
      "docs": {
        "page": "carousel",
        "route": "vue-components",
        "apiAnchor": "QCarousel-API"
      }
    },
    "description": "The QCarousel component allows you to display more information with less real estate, using slides. Useful for creating Wizards or an image gallery too."
  },
  {
    "name": "QCheckbox",
    "imports": [],
    "related": [
      "QToggle",
      "QOptionGroup",
      "QRadio",
      "QBtnToggle"
    ],
    "group": "QCheckbox",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": [
            "Any",
            "Array"
          ],
          "examples": [
            "false",
            "['car', 'building']"
          ]
        },
        "val": {
          "type": "Any",
          "desc": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked",
          "examples": [
            "car"
          ],
          "category": "model"
        },
        "true-value": {
          "type": "Any",
          "desc": "What model value should be considered as checked/ticked/on?",
          "default": true,
          "examples": [
            "Agreed"
          ],
          "category": "model"
        },
        "false-value": {
          "type": "Any",
          "desc": "What model value should be considered as unchecked/unticked/off?",
          "default": false,
          "examples": [
            "Disagree"
          ],
          "category": "model"
        },
        "label": {
          "type": "String",
          "desc": "Label to display along the component (or use the default slot instead of this prop)",
          "examples": [
            "I agree with the Terms and Conditions"
          ],
          "category": "label"
        },
        "left-label": {
          "type": "Boolean",
          "desc": "Label (if any specified) should be displayed on the left side of the component",
          "category": "label"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "keep-color": {
          "type": "Boolean",
          "desc": "Should the color (if specified any) be kept when the component is unticked/ off?",
          "category": "behavior"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "indeterminate-value": {
          "type": "Any",
          "desc": "What model value should be considered as 'indeterminate'?",
          "default": null,
          "examples": [
            0,
            "not_answered"
          ],
          "category": "behavior"
        },
        "toggle-indeterminate": {
          "type": "Boolean",
          "desc": "When user clicks/taps on the component, should we toggle through the indeterminate state too?",
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "methods": {
        "toggle": {
          "desc": "Toggle the state (of the model)"
        }
      },
      "docs": {
        "page": "checkbox",
        "route": "vue-components",
        "apiAnchor": "QCheckbox-API"
      }
    },
    "description": "The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option."
  },
  {
    "name": "QChip",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QAvatar",
      "QIcon",
      "QBadge"
    ],
    "group": "QChip",
    "api": {
      "type": "component",
      "props": {
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "icon-right": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "label": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Chip's content as string; overrides default slot if specified",
          "examples": [
            "John Doe",
            "Book"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "value": {
          "type": "Boolean",
          "desc": "Model of the component determining if QChip should be rendered or not",
          "default": true,
          "category": "model"
        },
        "selected": {
          "type": "Boolean",
          "sync": true,
          "desc": "Model for QChip if it's selected or not",
          "category": "model"
        },
        "square": {
          "type": "Boolean",
          "desc": "Sets a low value for border-radius instead of the default one, making it close to a square",
          "category": "style"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Display using the 'outline' design",
          "category": "style"
        },
        "clickable": {
          "type": "Boolean",
          "desc": "Is QChip clickable? If it's the case, then it will add hover effects and emit 'click' events",
          "category": "state"
        },
        "removable": {
          "type": "Boolean",
          "desc": "If set, then it displays a 'remove' icon that when clicked the QChip emits 'remove' event",
          "category": "state"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where QChip content goes, if not using 'label' property"
        }
      },
      "events": {
        "click": {
          "desc": "Emitted on QChip click if 'clickable' property is set",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object"
            }
          }
        },
        "update:selected": {
          "desc": "Used by Vue on 'selected.sync' prop for updating its value",
          "params": {
            "state": {
              "type": "Boolean",
              "desc": "Selected state"
            }
          }
        },
        "remove": {
          "desc": "Works along with 'value' and 'removable' prop. Emitted when toggling rendering state of the QChip",
          "params": {
            "state": {
              "type": "Boolean",
              "desc": "Render state (render or not)"
            }
          }
        }
      },
      "docs": {
        "page": "chip",
        "route": "vue-components",
        "apiAnchor": "QChip-API"
      }
    },
    "description": "The QChip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way.\nChips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so."
  },
  {
    "name": "QCircularProgress",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QInnerLoading",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "Loading",
      "LoadingBar"
    ],
    "group": "QCircularProgress",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Number",
          "default": 0,
          "desc": "Current progress (must be between min/max)",
          "examples": [
            0,
            100,
            52.32
          ],
          "category": "model"
        },
        "min": {
          "type": "Number",
          "default": 0,
          "desc": "Minimum value defining 'no progress' (must be lower than 'max')",
          "examples": [
            0,
            100,
            52.32
          ],
          "category": "model"
        },
        "max": {
          "type": "Number",
          "default": 100,
          "desc": "Maximum value defining 100% progress made (must be higher than 'min')",
          "examples": [
            100,
            52.32
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for the arc progress from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "center-color": {
          "type": "String",
          "desc": "Color name for the center part of the component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "track-color": {
          "type": "String",
          "desc": "Color name for the track of the component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "font-size": {
          "type": "String",
          "desc": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size",
          "default": "0.25em",
          "examples": [
            "1em",
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "thickness": {
          "type": "Number",
          "default": 0.2,
          "desc": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size",
          "examples": [
            1,
            0.3
          ],
          "category": "style"
        },
        "angle": {
          "type": "Number",
          "desc": "Angle to rotate progress arc by",
          "default": 0,
          "examples": [
            0,
            40,
            90
          ],
          "category": "content"
        },
        "indeterminate": {
          "type": "Boolean",
          "desc": "Put component into 'indeterminate' state; Ignores 'value' prop",
          "category": "behavior"
        },
        "show-value": {
          "type": "Boolean",
          "desc": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component",
          "category": "content|behavior"
        },
        "reverse": {
          "type": "Boolean",
          "desc": "Reverses the direction of progress; Only for determined state",
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Used for component content only if 'show-value' prop is set; Make sure the content has enough space to be displayed inside the component"
        }
      },
      "docs": {
        "page": "circular-progress",
        "route": "vue-components",
        "apiAnchor": "QCircularProgress-API"
      }
    },
    "description": "The QCircularProgress component displays a colored circular progress. The bar can either have a determinate progress, or an indeterminate animation. It should be used to inform the user that an action is occurring in the background."
  },
  {
    "name": "QColor",
    "imports": [
      "TouchPan",
      "QSlider",
      "QIcon",
      "QTabs",
      "QTab",
      "QTabPanels",
      "QTabPanel"
    ],
    "related": [],
    "group": "QColor",
    "api": {
      "type": "component",
      "docs": {
        "page": "color-picker",
        "route": "vue-components",
        "apiAnchor": "QColor-API"
      },
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "String",
          "examples": [
            "v-model=\"myColor\""
          ]
        },
        "default-value": {
          "type": "String",
          "desc": "The default value to show when the model doesn't has one",
          "examples": [
            "default-value=\"#c0c0c0\""
          ],
          "category": "model"
        },
        "default-view": {
          "type": "String",
          "desc": "The default view of the picker",
          "default": "spectrum",
          "values": [
            "spectrum",
            "tune",
            "palette"
          ],
          "category": "behavior"
        },
        "format-model": {
          "type": "String",
          "default": "auto",
          "desc": "Forces a certain model format upon the model",
          "values": [
            "auto",
            "hex",
            "rgb",
            "hexa",
            "rgba"
          ],
          "examples": [
            "hex"
          ],
          "category": "model"
        },
        "no-header": {
          "type": "Boolean",
          "desc": "Do not render header",
          "category": "behavior"
        },
        "no-footer": {
          "type": "Boolean",
          "desc": "Do not render footer; Useful when you want a specific view ('default-view' prop) and don't want the user to be able to switch it",
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "change": {
          "desc": "Emitted on lazy model value change (after user finishes selecting a color)",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      }
    },
    "description": "The QColor component provides a method to input colors."
  },
  {
    "name": "QDate",
    "imports": [
      "QBtn"
    ],
    "related": [
      "QTime",
      "QField"
    ],
    "group": "QDatetime",
    "api": {
      "type": "component",
      "docs": {
        "apiAnchor": "API",
        "page": "date",
        "route": "vue-components"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "desc": "Date of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "String",
          "examples": [
            "v-model=\"myDate\""
          ]
        },
        "landscape": {
          "type": "Boolean",
          "desc": "Display the component in landscape mode",
          "category": "behavior"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "calendar": {
          "type": "String",
          "desc": "Specify calendar type",
          "default": "gregorian",
          "values": [
            "gregorian",
            "persian"
          ],
          "category": "model"
        },
        "default-year-month": {
          "type": "String",
          "desc": "The default year and month to display (in YYYY/MM format) when model is unfilled (undefined or null)",
          "examples": [
            "1986/02"
          ],
          "category": "model"
        },
        "default-view": {
          "type": "String",
          "desc": "The view which will be displayed by default",
          "default": "Calendar",
          "values": [
            "Calendar",
            "Months",
            "Years"
          ],
          "category": "model"
        },
        "events": {
          "type": [
            "Array",
            "Function"
          ],
          "desc": "A list of events to highlight on the calendar; If using a function, it receives the date as a String and must return a Boolean (matches or not)",
          "examples": [
            ":events=\"['2018/11/05', '2018/11/06', '2018/11/09', '2018/11/23']\"",
            ":events=\"date => date[9] % 3 === 0\""
          ],
          "category": "model"
        },
        "event-color": {
          "type": [
            "String",
            "Function"
          ],
          "desc": "Color name (from the Quasar Color Palette); If using a function, it receives the date as a String and must return a String (color for the received date)",
          "examples": [
            "teal-10",
            ":event-color=\"(date) => date[9] % 2 === 0 ? 'teal' : 'orange'\""
          ],
          "category": "style"
        },
        "options": {
          "type": [
            "Array",
            "Function"
          ],
          "desc": "Optionally configure the days that are selectable; If using a function, it receives the date as a String and must return a Boolean (is date acceptable or not)",
          "examples": [
            ":options=\"['2018/11/05', '2018/11/12', '2018/11/19', '2018/11/26' ]\"",
            ":options=\"date => date[9] % 3 === 0\"",
            ":options=\"date => date >= '2018/11/03' && date <= '2018/11/15'\""
          ],
          "category": "model"
        },
        "first-day-of-week": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Sets the day of the week that is considered the first day (0 - Sunday, 1 - Monday, ...); This day will show in the left-most column of the calendar",
          "default": "(based on configured Quasar lang language)",
          "examples": [
            "first-day-of-week=\"1\"",
            ":first-day-of-week=\"selectedFirstDayOfTheWeek\""
          ],
          "category": "model"
        },
        "today-btn": {
          "type": "Boolean",
          "desc": "Display a button that selects the current day",
          "category": "content"
        },
        "minimal": {
          "type": "Boolean",
          "desc": "Don’t display the header",
          "category": "content"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "String",
              "desc": "New model value",
              "required": true
            }
          },
          "type": "String"
        }
      }
    },
    "description": "The QDate component provides a method to input date. Currently it supports Gregorian (default) and Persian calendars."
  },
  {
    "name": "QDialog",
    "imports": [],
    "related": [
      "Dialog",
      "ClosePopup",
      "QCard",
      "QCardActions",
      "QCardSection",
      "QPopupProxy"
    ],
    "group": "QDialog",
    "api": {
      "type": "component",
      "props": {
        "content-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the content",
          "examples": [
            "my-special-class",
            ":content-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the content",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ color: '#ff0000' }\""
          ],
          "category": "style"
        },
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it",
          "category": "behavior"
        },
        "no-esc-dismiss": {
          "type": "Boolean",
          "desc": "User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' prop is also set",
          "category": "behavior"
        },
        "no-backdrop-dismiss": {
          "type": "Boolean",
          "desc": "User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' prop is also set",
          "category": "behavior"
        },
        "no-route-dismiss": {
          "type": "Boolean",
          "desc": "Changing route app won't dismiss Dialog; No need to set it if 'persistent' prop is also set",
          "category": "behavior"
        },
        "auto-close": {
          "type": "Boolean",
          "desc": "Any click/tap inside of the dialog will close it",
          "category": "behavior"
        },
        "seamless": {
          "type": "Boolean",
          "desc": "Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too",
          "category": "content"
        },
        "maximized": {
          "type": "Boolean",
          "desc": "Put Dialog into maximized mode",
          "category": "content"
        },
        "full-width": {
          "type": "Boolean",
          "desc": "Dialog will try to render with same width as the window",
          "category": "content"
        },
        "full-height": {
          "type": "Boolean",
          "desc": "Dialog will try to render with same height as the window",
          "category": "content"
        },
        "position": {
          "type": "String",
          "desc": "",
          "default": "standard",
          "values": [
            "standard",
            "top",
            "right",
            "bottom",
            "left"
          ],
          "examples": [
            "top",
            "right"
          ],
          "category": "content"
        },
        "transition-show": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "scale"
        },
        "transition-hide": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "scale"
        },
        "square": {
          "type": "Boolean",
          "desc": "Forces content to have squared borders",
          "category": "style"
        },
        "no-refocus": {
          "type": "Boolean",
          "desc": "(Accessibility) When Dialog gets hidden, do not refocus on the DOM element that previously had focus",
          "category": "behavior"
        },
        "no-focus": {
          "type": "Boolean",
          "desc": "(Accessibility) When Dialog gets shown, do not switch focus on it",
          "category": "behavior"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "shake": {
          "desc": "Shakes up the Dialog in order to catch user's attention"
        },
        "escape-key": {
          "desc": "Emitted when ESC key is pressed; Does not gets emitted if Dialog is 'persistent' or it has 'no-esc-key' set"
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      },
      "docs": {
        "page": "dialog",
        "route": "vue-components",
        "apiAnchor": "QDialog-API"
      }
    },
    "description": "The QDialog component is a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).\nFrom a UI perspective, you can think of Dialogs as a type of floating modal, which covers only a portion of the screen. This means Dialogs should only be used for quick user actions, like verifying a password, getting a short App notification or selecting an option or options quickly."
  },
  {
    "name": "QDrawer",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QLayout",
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList"
    ],
    "group": "QLayout",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "drawer",
        "apiAnchor": "QDrawer-API"
      },
      "props": {
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model"
        },
        "side": {
          "type": "String",
          "desc": "Side to attach to",
          "values": [
            "left",
            "right"
          ],
          "default": "left",
          "examples": [
            "right"
          ],
          "category": "behavior"
        },
        "overlay": {
          "type": "Boolean",
          "desc": "Puts drawer into overlay mode (does not occupies space on screen, narrowing the page)",
          "category": "behavior"
        },
        "width": {
          "type": "Number",
          "desc": "Width of drawer (in pixels)",
          "default": 300,
          "examples": [
            ":width=\"350\""
          ],
          "category": "style"
        },
        "mini": {
          "type": "Boolean",
          "desc": "Puts drawer into mini mode",
          "category": "behavior"
        },
        "mini-width": {
          "type": "Number",
          "desc": "Width of drawer (in pixels) when in mini-mode",
          "default": 60,
          "examples": [
            ":width=\"100\""
          ],
          "category": "style"
        },
        "breakpoint": {
          "type": "Number",
          "desc": "Breakpoint (in pixels) of layout width up to which mobile mode is used",
          "default": 1023,
          "examples": [
            1200,
            ":breakpoint=\"1400\""
          ],
          "category": "behavior"
        },
        "behavior": {
          "type": "String",
          "desc": "Overrides the default dynamic mode into which the drawer is put on",
          "values": [
            "default",
            "desktop",
            "mobile"
          ],
          "default": "default",
          "examples": [
            "mobile"
          ],
          "category": "behavior"
        },
        "bordered": {
          "type": "Boolean",
          "desc": "Applies a default border to the component",
          "category": "style"
        },
        "elevated": {
          "type": "Boolean",
          "desc": "Adds a default shadow to the header",
          "category": "style"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "Does not auto-closes when app's route changes",
          "category": "behavior"
        },
        "show-if-above": {
          "type": "Boolean",
          "desc": "Force drawer to be shown on screen on initial render if the layout width is above breakpoint",
          "category": "behavior"
        },
        "content-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the drawer",
          "examples": [
            "my-special-class",
            ":content-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the drawer",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "no-swipe-open": {
          "type": "Boolean",
          "desc": "Disables the default behavior where drawer can be swiped into view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature",
          "category": "behavior"
        },
        "no-swipe-close": {
          "type": "Boolean",
          "desc": "Disables the default behavior where drawer can be swiped out of view (applies to drawer content only); Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature",
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component (overriden by 'mini' slot if used and drawer is in mini mode)"
        },
        "mini": {
          "desc": "Content to show when in mini mode (overrides 'default' slot)"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "on-layout": {
          "desc": "Emitted when drawer toggles between occupying space on page or not",
          "params": {
            "state": {
              "type": "Boolean",
              "desc": "New state"
            }
          }
        },
        "click": {
          "desc": "Emitted when user clicks/taps on the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "mouseover": {
          "desc": "Emitted when user moves mouse cursor over the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "mouseout": {
          "desc": "Emitted when user moves mouse cursor out of the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      }
    },
    "description": "QLayout allows you to configure your views as a 3x3 matrix, containing optional left-side and/or right-side Drawers. If you haven’t already, please read [QLayout](/layout/layout) documentation page first.\nQDrawer is the sidebar part of your QLayout."
  },
  {
    "name": "QExpansionItem",
    "imports": [
      "QItem",
      "QItemSection",
      "QItemLabel",
      "QIcon",
      "QSlideTransition",
      "QSeparator"
    ],
    "related": [
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList",
      "QSlideItem",
      "QSlideTransition"
    ],
    "group": "QList",
    "api": {
      "type": "component",
      "props": {
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "behavior"
        },
        "exact": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'exact' property",
          "category": "behavior"
        },
        "append": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'append' property",
          "category": "behavior"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "behavior"
        },
        "active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-active-class"
          ],
          "category": "behavior"
        },
        "exact-active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-exact-active-class"
          ],
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining 'open' state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "expand-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "expand-icon-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Apply custom class(es) to the expand icon item section",
          "examples": [
            "text-purple"
          ],
          "category": "style"
        },
        "label": {
          "type": "String",
          "desc": "Header label (unless using 'header' slot)",
          "examples": [
            "My expansion item"
          ],
          "category": "content"
        },
        "label-lines": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!",
          "examples": [
            "1",
            "3",
            ":label-lines=\"2\""
          ],
          "category": "content"
        },
        "caption": {
          "type": "String",
          "desc": "Header sub-label (unless using 'header' slot)",
          "examples": [
            "Unread message: 5"
          ],
          "category": "content"
        },
        "caption-lines": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!",
          "examples": [
            "1",
            "3",
            ":caption-lines=\"2\""
          ],
          "category": "content"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "duration": {
          "type": "Number",
          "desc": "Animation duration (in milliseconds)",
          "default": 300,
          "examples": [
            ":duration=\"1000\""
          ],
          "category": "behavior"
        },
        "header-inset-level": {
          "type": "Number",
          "desc": "Apply an inset to header (unless using 'header' slot); Useful when header avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu",
          "examples": [
            ":header-inset-level=\"1\""
          ],
          "category": "content"
        },
        "content-inset-level": {
          "type": "Number",
          "desc": "Apply an inset to content (changes content padding)",
          "examples": [
            ":content-inset-level=\"1\""
          ],
          "category": "content"
        },
        "expand-separator": {
          "type": "Boolean",
          "desc": "Apply a top and bottom separator when expansion item is opened",
          "category": "content"
        },
        "default-opened": {
          "type": "Boolean",
          "desc": "Puts expansion item into open state on initial render; Overriden by v-model if used",
          "category": "behavior"
        },
        "expand-icon-toggle": {
          "type": "Boolean",
          "desc": "Applies the expansion events to the expand icon only and not to the whole header",
          "category": "behavior"
        },
        "switch-toggle-side": {
          "type": "Boolean",
          "desc": "Switch expand icon side (from default 'right' to 'left')",
          "category": "content"
        },
        "dense-toggle": {
          "type": "Boolean",
          "desc": "Use dense mode for expand icon",
          "category": "style"
        },
        "group": {
          "type": "String",
          "desc": "Register expansion item into a group (unique name that must be applied to all expansion items in that group) for coordinated open/close state within the group a.k.a. 'accordion mode'",
          "examples": [
            "my-emails"
          ],
          "category": "content|behavior"
        },
        "popup": {
          "type": "Boolean",
          "desc": "Put expansion list into 'popup' mode",
          "category": "behavior"
        },
        "header-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Apply custom style to the header",
          "examples": [
            "background: '#ff0000'",
            ":header-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "header-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Apply custom class(es) to the header",
          "examples": [
            "my-custom-class",
            ":header-class=\"{ 'my-custom-class': someCondition }\""
          ],
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Slot used for expansion item's content"
        },
        "header": {
          "desc": "Slot used for overriding default header"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      },
      "docs": {
        "page": "expansion-item",
        "route": "vue-components",
        "apiAnchor": "QExpansionItem-API"
      }
    },
    "description": "The QExpansionItem component allows the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.\nThey are basically [QItem](/vue-components/list-and-list-items) components wrapped with additional functionality. So they can be included in QLists and inherit QItem component properties."
  },
  {
    "name": "QFab",
    "imports": [
      "QBtn",
      "QIcon"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QFab",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "floating-action-button",
        "apiAnchor": "QFab-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Boolean",
          "desc": "Controls state of fab actions (showing/hidden); Works best with v-model directive, otherwise use along listening to 'input' event",
          "category": "model"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "active-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "direction": {
          "type": "String",
          "desc": "Direction to expand Fab Actions to",
          "default": "right",
          "values": [
            "up",
            "right",
            "down",
            "left"
          ],
          "examples": [
            "bottom"
          ],
          "category": "behavior"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "By default, Fab Actions are hidden when user navigates to another route and this prop disables this behavior",
          "category": "behavior"
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design for Fab button",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design for Fab button",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design for Fab button",
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Apply the glossy effect over the button",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where QFabActions may go into"
        },
        "tooltip": {
          "desc": "Slot specifically designed for a QTooltip"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when fab actions are shown/hidden; Captured by v-model directive",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      },
      "methods": {
        "show": {
          "desc": "Expands fab actions list",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Collapses fab actions list",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      }
    },
    "description": "A Floating Action Button (FAB) represents the primary action in a Page. But, it's not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.\nNote that you don’t need a QLayout to use FABs."
  },
  {
    "name": "QFabAction",
    "imports": [
      "QBtn"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QFab",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "floating-action-button",
        "apiAnchor": "QFabAction-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content",
          "required": true
        },
        "outline": {
          "type": "Boolean",
          "desc": "Use 'outline' design for Fab button",
          "category": "style"
        },
        "push": {
          "type": "Boolean",
          "desc": "Use 'push' design for Fab button",
          "category": "style"
        },
        "flat": {
          "type": "Boolean",
          "desc": "Use 'flat' design for Fab button",
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "glossy": {
          "type": "Boolean",
          "desc": "Apply the glossy effect over the button",
          "category": "style"
        },
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "router"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "router"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion for this slot: QTooltip"
        }
      },
      "events": {
        "click": {
          "desc": "Emitted when user clicks/taps on the component",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      }
    },
    "description": "A Floating Action Button (FAB) represents the primary action in a Page. But, it's not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.\nNote that you don’t need a QLayout to use FABs."
  },
  {
    "name": "QField",
    "imports": [
      "QIcon",
      "QSpinner"
    ],
    "related": [],
    "group": "QField",
    "api": {
      "type": "component",
      "props": {
        "error": {
          "type": "Boolean",
          "desc": "Does field has validation errors?",
          "category": "behavior"
        },
        "error-message": {
          "type": "String",
          "desc": "Validation error message (gets displayed only if 'error' is set to 'true')",
          "examples": [
            "Username must have at least 5 characters"
          ],
          "category": "content"
        },
        "no-error-icon": {
          "type": "Boolean",
          "desc": "Hide error icon when there is an error",
          "category": "content"
        },
        "rules": {
          "type": "Array",
          "desc": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
          "examples": [
            ":rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"",
            ":rules=\"[ 'fulltime' ]\""
          ],
          "category": "behavior"
        },
        "lazy-rules": {
          "type": "Boolean",
          "desc": "Check validation status against the 'rules' only after field loses focus for first time",
          "category": "behavior"
        },
        "label": {
          "type": "String",
          "desc": "A text label that will “float” up above the input field, once the field gets focus",
          "examples": [
            "Username"
          ],
          "category": "content"
        },
        "stack-label": {
          "type": "Boolean",
          "desc": "Label will be always shown above the field regardless of field content (if any)",
          "category": "content"
        },
        "hint": {
          "type": "String",
          "desc": "Helper (hint) text which gets placed below your wrapped form component",
          "examples": [
            "Fill in between 3 and 12 characters"
          ],
          "category": "content"
        },
        "hide-hint": {
          "type": "Boolean",
          "desc": "Hide the helper (hint) text when field doesn't have focus",
          "category": "content"
        },
        "prefix": {
          "type": "String",
          "desc": "Prefix",
          "examples": [
            "$"
          ],
          "category": "content"
        },
        "suffix": {
          "type": "String",
          "desc": "Suffix",
          "examples": [
            "@gmail.com"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "bg-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "loading": {
          "type": "Boolean",
          "desc": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
          "category": "behavior|content"
        },
        "clearable": {
          "type": "Boolean",
          "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
          "category": "behavior|content"
        },
        "clear-icon": {
          "type": "String",
          "desc": "Custom icon to use for the clear button when using along with 'clearable' prop",
          "examples": [
            "close"
          ],
          "category": "content"
        },
        "filled": {
          "type": "Boolean",
          "desc": "Use 'filled' design for the field",
          "category": "style"
        },
        "outlined": {
          "type": "Boolean",
          "desc": "Use 'outlined' design for the field",
          "category": "style"
        },
        "borderless": {
          "type": "Boolean",
          "desc": "Use 'borderless' design for the field",
          "category": "style"
        },
        "standout": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
          "examples": [
            "standout",
            "standout=\"bg-primary text-white\""
          ],
          "category": "style"
        },
        "bottom-slots": {
          "type": "Boolean",
          "desc": "Enables bottom slots ('error', 'hint', 'counter')",
          "category": "content"
        },
        "hide-bottom-space": {
          "type": "Boolean",
          "desc": "Does not reserves space for hint/error/counter anymore when these are not used; as a result, it also disables the animation for those",
          "category": "style"
        },
        "counter": {
          "type": "Boolean",
          "desc": "Show an automatic counter on bottom right",
          "category": "content"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a small standard border-radius for a squared shape of the component",
          "category": "style"
        },
        "square": {
          "type": "Boolean",
          "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "items-aligned": {
          "type": "Boolean",
          "desc": "Align content to match QItem",
          "category": "content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "autofocus": {
          "type": "Boolean",
          "desc": "Focus field on initial component render",
          "category": "behavior"
        },
        "maxlength": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Specify a max length of model",
          "examples": [
            "12"
          ],
          "category": "model"
        }
      },
      "slots": {
        "default": {
          "desc": "Field main content"
        },
        "prepend": {
          "desc": "Prepend inner field; Suggestions: QIcon, QBtn"
        },
        "append": {
          "desc": "Append to inner field; Suggestions: QIcon, QBtn"
        },
        "before": {
          "desc": "Prepend outer field; Suggestions: QIcon, QBtn"
        },
        "after": {
          "desc": "Append outer field; Suggestions: QIcon, QBtn"
        },
        "error": {
          "desc": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "hint": {
          "desc": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "counter": {
          "desc": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "loading": {
          "desc": "Override default spinner when component is in loading mode; Use in conjunction with 'loading' prop"
        },
        "control": {
          "desc": "Slot for controls; Suggestion QSlider, QRange, QKnob, ..."
        }
      },
      "methods": {
        "resetValidation": {
          "desc": "Reset validation status"
        },
        "validate": {
          "desc": "Trigger a validation",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Optional value to validate against"
            }
          }
        }
      },
      "docs": {
        "page": "field",
        "route": "vue-components",
        "apiAnchor": "QField-API"
      }
    },
    "description": "The QField component is used to provide common functionality and aspect to form components. It uses `:value` (or `v-model` if you want to use `clearable` property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors.\nQField allows you to display any form control (or almost anything as a matter of fact) inside it. Just place your desired content inside the `control` slot."
  },
  {
    "name": "QFooter",
    "imports": [
      "QResizeObserver"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer",
      "QToolbar",
      "QToolbarTitle",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QBar"
    ],
    "group": "QLayout",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "header-and-footer",
        "apiAnchor": "QFooter-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "default": true,
          "examples": [
            "v-model=\"footerState\""
          ],
          "category": "model"
        },
        "reveal": {
          "type": "Boolean",
          "desc": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide footer",
          "category": "behavior"
        },
        "bordered": {
          "type": "Boolean",
          "desc": "Applies a default border to the component",
          "category": "style"
        },
        "elevated": {
          "type": "Boolean",
          "desc": "Adds a default shadow to the footer",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component; Suggestion: QToolbar"
        }
      },
      "events": {
        "reveal": {
          "desc": "Emitted when 'reveal' state gets changed",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New 'reveal' state"
            }
          }
        }
      }
    },
    "description": "QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer (mostly used for navbar, but can be anything). If you haven’t already, please read [QLayout](/layout/layout) documentation page first."
  },
  {
    "name": "QHeader",
    "imports": [
      "QResizeObserver"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer",
      "QToolbar",
      "QToolbarTitle",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QBar"
    ],
    "group": "QLayout",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "header-and-footer",
        "apiAnchor": "QHeader-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "default": true,
          "examples": [
            "v-model=\"headerState\""
          ],
          "category": "model"
        },
        "reveal": {
          "type": "Boolean",
          "desc": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide header",
          "category": "behavior"
        },
        "reveal-offset": {
          "type": "Number",
          "desc": "Amount of scroll (in pixels) that should trigger a 'reveal' state change",
          "default": 250,
          "examples": [
            ":reveal-offset=\"500\""
          ],
          "category": "behavior"
        },
        "bordered": {
          "type": "Boolean",
          "desc": "Applies a default border to the component",
          "category": "style"
        },
        "elevated": {
          "type": "Boolean",
          "desc": "Adds a default shadow to the header",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component; Suggestion: QToolbar"
        }
      },
      "events": {
        "reveal": {
          "desc": "Emitted when 'reveal' state gets changed",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New 'reveal' state"
            }
          }
        }
      }
    },
    "description": "QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer (mostly used for navbar, but can be anything). If you haven’t already, please read [QLayout](/layout/layout) documentation page first."
  },
  {
    "name": "QIcon",
    "imports": [],
    "related": [],
    "group": "QIcon",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "name": {
          "type": "String",
          "desc": "Name of the icon, following Quasar convention",
          "examples": [
            "map",
            "ion-add"
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "left": {
          "type": "Boolean",
          "desc": "Useful if icon is on the left side of something: applies a standard margin on the right side of Icon",
          "category": "content"
        },
        "right": {
          "type": "Boolean",
          "desc": "Useful if icon is on the right side of something: applies a standard margin on the left side of Icon",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestions: QTooltip or QMenu"
        }
      },
      "docs": {
        "page": "icon",
        "route": "vue-components",
        "apiAnchor": "QIcon-API"
      }
    },
    "description": "The QIcon component allows you to easily insert icons within other components or any other area of your pages.\nQuasar currently supports: [Material Icons](https://material.io/icons/) , [Font Awesome](http://fontawesome.io/icons/), [Ionicons](http://ionicons.com/), [MDI](https://materialdesignicons.com/), [Eva Icons](https://akveo.github.io/eva-icons) and [Themify Icons](https://themify.me/themify-icons)."
  },
  {
    "name": "QImg",
    "imports": [
      "QSpinner"
    ],
    "related": [
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail"
    ],
    "group": "QImg",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "src": {
          "type": "String",
          "desc": "Path to image",
          "examples": [
            "(statics folder) statics/img/something.png",
            "(relative path format) :src=\"require('./my_img.jpg')\"",
            "(URL) https://some-site.net/some-img.gif"
          ],
          "category": "model"
        },
        "srcset": {
          "type": "String",
          "desc": "Same syntax as <img> srcset attribute.",
          "link": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#Resolution_switching_Different_sizes",
          "examples": [
            "elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w"
          ],
          "category": "model"
        },
        "sizes": {
          "type": "String",
          "desc": "Same syntax as <img> sizes attribute.",
          "link": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#Resolution_switching_Different_sizes",
          "examples": [
            "(max-width: 320px) 280px, (max-width: 480px) 440px, 800px"
          ],
          "category": "model"
        },
        "alt": {
          "type": "String",
          "desc": "Specifies an alternate text for the image, if the image cannot be displayed",
          "examples": [
            "Two cats"
          ],
          "category": "content"
        },
        "placeholder-src": {
          "type": "String",
          "desc": "While waiting for your image to load, you can use a placeholder image",
          "examples": [
            "https://some-site.net/some-placeholder.jpg"
          ],
          "category": "model"
        },
        "basic": {
          "type": "Boolean",
          "desc": "Do not use transitions; faster render",
          "category": "content"
        },
        "contain": {
          "type": "Boolean",
          "desc": "Make sure that the image getting displayed is fully contained, regardless if additional blank space besides the image is needed on horizontal or vertical",
          "category": "content"
        },
        "position": {
          "type": "String",
          "desc": "Equivalent to CSS background-position property",
          "default": "50% 50%",
          "examples": [
            "0 0",
            "20px 50px"
          ],
          "category": "content"
        },
        "ratio": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Force the component to maintain an aspect ratio",
          "examples": [
            "(Number format) :ratio=\"16/9\"",
            "(String format) ratio=\"1\""
          ],
          "category": "content"
        },
        "transition": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "spinner-color": {
          "type": "String",
          "desc": "Color name for default Spinner (unless using a 'loading' slot)",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "spinner-size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name, for default Spinner (unless using a 'loading' slot)",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot can be used for captions. See examples"
        },
        "loading": {
          "desc": "While image is loading, this slot is being displayed on top of the component; Suggestions: a spinner or text"
        },
        "error": {
          "desc": "Optional slot to be used when image could not be loaded; make sure you assign a min-height and min-width to the component through CSS"
        }
      },
      "events": {
        "load": {
          "desc": "Emitted when image has been loaded by the browser",
          "params": {
            "src": {
              "type": "String",
              "desc": "URL of image that has been loaded; useful when using 'srcset' and/or 'sizes'",
              "examples": [
                "https://some-site.net/some-img.gif"
              ]
            }
          }
        },
        "error": {
          "desc": "Emitted when browser could not load the image",
          "params": {
            "src": {
              "type": "Error",
              "desc": "JS Error object"
            }
          }
        }
      },
      "docs": {
        "page": "img",
        "route": "vue-components",
        "apiAnchor": "QImg-API"
      }
    },
    "description": "The QImg component makes working with images easy and also adds a nice loading effect to it along with many other features (example: the ability to set an aspect ratio)."
  },
  {
    "name": "QInnerLoading",
    "imports": [
      "QSpinner"
    ],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "Loading",
      "LoadingBar"
    ],
    "group": "QInnerLoading",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "showing": {
          "type": "Boolean",
          "desc": "State - loading or not",
          "category": "state"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name, for Spinner (unless using the default slot)",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style",
          "default": "42px"
        },
        "transition-show": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "transition-hide": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot is used for replacing default Spinner; Suggestions: a spinner or text"
        }
      },
      "docs": {
        "page": "inner-loading",
        "route": "vue-components",
        "apiAnchor": "QInnerLoading-API"
      }
    },
    "description": "The QInnerLoading component allows you to add a progress animation within a component. Much like the [Loading Plugin](/vue-components/loading), it's purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time. QInnerLoading will add an opaque overlay over the delayed element along with a [Spinner](/vue-components/spinners)."
  },
  {
    "name": "QInput",
    "imports": [
      "QField"
    ],
    "related": [],
    "group": "QInput",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated to the inner native input element (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "mask": {
          "type": "String",
          "desc": "Custom mask or one of the predefined mask names",
          "examples": [
            "###-##",
            "date",
            "datetime",
            "time",
            "fulltime",
            "phone",
            "card"
          ],
          "category": "behavior"
        },
        "fill-mask": {
          "type": "Boolean",
          "desc": "Fills string with underscore characters to fill mask's length",
          "category": "behavior"
        },
        "unmasked-value": {
          "type": "Boolean",
          "desc": "Model will be unmasked (won't contain tokens/separation characters)",
          "category": "behavior"
        },
        "error": {
          "type": "Boolean",
          "desc": "Does field has validation errors?",
          "category": "behavior"
        },
        "error-message": {
          "type": "String",
          "desc": "Validation error message (gets displayed only if 'error' is set to 'true')",
          "examples": [
            "Username must have at least 5 characters"
          ],
          "category": "content"
        },
        "no-error-icon": {
          "type": "Boolean",
          "desc": "Hide error icon when there is an error",
          "category": "content"
        },
        "rules": {
          "type": "Array",
          "desc": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
          "examples": [
            ":rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"",
            ":rules=\"[ 'fulltime' ]\""
          ],
          "category": "behavior"
        },
        "lazy-rules": {
          "type": "Boolean",
          "desc": "Check validation status against the 'rules' only after field loses focus for first time",
          "category": "behavior"
        },
        "label": {
          "type": "String",
          "desc": "A text label that will “float” up above the input field, once the field gets focus",
          "examples": [
            "Username"
          ],
          "category": "content"
        },
        "stack-label": {
          "type": "Boolean",
          "desc": "Label will be always shown above the field regardless of field content (if any)",
          "category": "content"
        },
        "hint": {
          "type": "String",
          "desc": "Helper (hint) text which gets placed below your wrapped form component",
          "examples": [
            "Fill in between 3 and 12 characters"
          ],
          "category": "content"
        },
        "hide-hint": {
          "type": "Boolean",
          "desc": "Hide the helper (hint) text when field doesn't have focus",
          "category": "content"
        },
        "prefix": {
          "type": "String",
          "desc": "Prefix",
          "examples": [
            "$"
          ],
          "category": "content"
        },
        "suffix": {
          "type": "String",
          "desc": "Suffix",
          "examples": [
            "@gmail.com"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "bg-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "loading": {
          "type": "Boolean",
          "desc": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
          "category": "behavior|content"
        },
        "clearable": {
          "type": "Boolean",
          "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
          "category": "behavior|content"
        },
        "clear-icon": {
          "type": "String",
          "desc": "Custom icon to use for the clear button when using along with 'clearable' prop",
          "examples": [
            "close"
          ],
          "category": "content"
        },
        "filled": {
          "type": "Boolean",
          "desc": "Use 'filled' design for the field",
          "category": "style"
        },
        "outlined": {
          "type": "Boolean",
          "desc": "Use 'outlined' design for the field",
          "category": "style"
        },
        "borderless": {
          "type": "Boolean",
          "desc": "Use 'borderless' design for the field",
          "category": "style"
        },
        "standout": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
          "examples": [
            "standout",
            "standout=\"bg-primary text-white\""
          ],
          "category": "style"
        },
        "bottom-slots": {
          "type": "Boolean",
          "desc": "Enables bottom slots ('error', 'hint', 'counter')",
          "category": "content"
        },
        "hide-bottom-space": {
          "type": "Boolean",
          "desc": "Does not reserves space for hint/error/counter anymore when these are not used; as a result, it also disables the animation for those",
          "category": "style"
        },
        "counter": {
          "type": "Boolean",
          "desc": "Show an automatic counter on bottom right",
          "category": "content"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a small standard border-radius for a squared shape of the component",
          "category": "style"
        },
        "square": {
          "type": "Boolean",
          "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "items-aligned": {
          "type": "Boolean",
          "desc": "Align content to match QItem",
          "category": "content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "autofocus": {
          "type": "Boolean",
          "desc": "Focus field on initial component render",
          "category": "behavior"
        },
        "value": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "required": true,
          "examples": [
            "v-model=\"myText\""
          ],
          "category": "model"
        },
        "type": {
          "type": "String",
          "desc": "Input type",
          "default": "text",
          "values": [
            "text",
            "password",
            "textarea",
            "email",
            "search",
            "tel",
            "file",
            "number",
            "url",
            "time",
            "date"
          ],
          "examples": [
            "password"
          ],
          "category": "general"
        },
        "debounce": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Debounce amount (in milliseconds) when updating model",
          "examples": [
            "0",
            "530"
          ],
          "category": "model"
        },
        "maxlength": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Specify a max length of model",
          "examples": [
            "12"
          ],
          "category": "model"
        },
        "autogrow": {
          "type": "Boolean",
          "desc": "Make field autogrow along with its content (uses a textarea)",
          "category": "content"
        },
        "input-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the underlying input tag",
          "examples": [
            "my-special-class",
            ":input-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "input-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the underlying input tag",
          "examples": [
            "background-color: #ff0000",
            ":input-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Field main content"
        },
        "prepend": {
          "desc": "Prepend inner field; Suggestions: QIcon, QBtn"
        },
        "append": {
          "desc": "Append to inner field; Suggestions: QIcon, QBtn"
        },
        "before": {
          "desc": "Prepend outer field; Suggestions: QIcon, QBtn"
        },
        "after": {
          "desc": "Append outer field; Suggestions: QIcon, QBtn"
        },
        "error": {
          "desc": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "hint": {
          "desc": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "counter": {
          "desc": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "loading": {
          "desc": "Override default spinner when component is in loading mode; Use in conjunction with 'loading' prop"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "New model value",
              "required": true
            }
          }
        },
        "focus": {
          "desc": "Emitted when component gets focused",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object"
            }
          }
        },
        "blur": {
          "desc": "Emitted when component loses focus",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object"
            }
          }
        }
      },
      "methods": {
        "resetValidation": {
          "desc": "Reset validation status"
        },
        "validate": {
          "desc": "Trigger a validation",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Optional value to validate against"
            }
          }
        },
        "focus": {
          "desc": "Focus underlying input tag"
        },
        "blur": {
          "desc": "Lose focus on underlying input tag"
        }
      },
      "docs": {
        "page": "input",
        "route": "vue-components",
        "apiAnchor": "QInput-API"
      }
    },
    "description": "The QInput component is used to capture text input from the user. It uses `v-model`, similar to a regular input. It has support for errors and validation, and comes in a variety of styles, colors, and types."
  },
  {
    "name": "QItem",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "api": {
      "type": "component",
      "docs": {
        "page": "list-and-list-items",
        "route": "vue-components",
        "apiAnchor": "QItem-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "behavior"
        },
        "exact": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'exact' property",
          "category": "behavior"
        },
        "append": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'append' property",
          "category": "behavior"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "behavior"
        },
        "active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-active-class"
          ],
          "category": "behavior"
        },
        "exact-active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-exact-active-class"
          ],
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "active": {
          "type": "Boolean",
          "desc": "Put item into 'active' state",
          "category": "state"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "clickable": {
          "type": "Boolean",
          "desc": "Is QItem clickable? If it's the case, then it will add hover effects and emit 'click' events",
          "category": "state"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "inset-level": {
          "type": "Number",
          "desc": "Apply an inset; Useful when avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu",
          "examples": [
            ":inset-level=\"1\""
          ],
          "category": "content"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "tag": {
          "type": "String",
          "desc": "HTML tag to render; Suggestion: use 'label' when encapsulating a QCheckbox/QRadio/QToggle so that when user clicks/taps on the whole item it will trigger a model change for the mentioned components",
          "default": "div",
          "examples": [
            "a",
            "label"
          ],
          "category": "content"
        },
        "manual-focus": {
          "type": "Boolean",
          "desc": "Put item into a manual focus state; Enables 'focused' prop which will determine if item is focused or not, rather than relying on native hover/focus states",
          "category": "state"
        },
        "focused": {
          "type": "Boolean",
          "desc": "Determines focus state, ONLY if 'manual-focus' is enabled / set to true",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where QItem's content goes"
        }
      }
    },
    "description": "The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example [QExpansionItem](/vue-components/expansion-item) or [QSlideItem](/vue-components/slide-item). Also [QSeparator](/vue-components/separator) can be used to split up sections, where needed.\nList Items have the following pre-built child components:\n* **QItemSection** - An item section can have several uses for particular content. They are controlled via the `avatar`, `thumbnail` and `side` props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).\n* **QItemLabel** - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself."
  },
  {
    "name": "QItemLabel",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "api": {
      "type": "component",
      "docs": {
        "page": "list-and-list-items",
        "route": "vue-components",
        "apiAnchor": "QItemLabel-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "overline": {
          "type": "Boolean",
          "desc": "Renders an overline label",
          "category": "content"
        },
        "caption": {
          "type": "Boolean",
          "desc": "Renders a caption label",
          "category": "content"
        },
        "header": {
          "type": "Boolean",
          "desc": "Renders a header label",
          "category": "content"
        },
        "lines": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!",
          "examples": [
            "1",
            "3",
            ":lines=\"2\""
          ],
          "category": "content|behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "The content of the label; Suggestion: text"
        }
      }
    },
    "description": "The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example [QExpansionItem](/vue-components/expansion-item) or [QSlideItem](/vue-components/slide-item). Also [QSeparator](/vue-components/separator) can be used to split up sections, where needed.\nList Items have the following pre-built child components:\n* **QItemSection** - An item section can have several uses for particular content. They are controlled via the `avatar`, `thumbnail` and `side` props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).\n* **QItemLabel** - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself."
  },
  {
    "name": "QItemSection",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "api": {
      "type": "component",
      "docs": {
        "page": "list-and-list-items",
        "route": "vue-components",
        "apiAnchor": "QItemSection-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "avatar": {
          "type": "Boolean",
          "desc": "Render an avatar item side (does not needs 'side' prop to be set)",
          "category": "content"
        },
        "thumbnail": {
          "type": "Boolean",
          "desc": "Render a thumbnail item side (does not needs 'side' prop to be set)",
          "category": "content"
        },
        "side": {
          "type": "Boolean",
          "desc": "Renders as a side of the item",
          "category": "content"
        },
        "top": {
          "type": "Boolean",
          "desc": "Align content to top (useful for multi-line items)",
          "category": "content"
        },
        "no-wrap": {
          "type": "Boolean",
          "desc": "Do not wrap text (useful for item's main content)",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Section's actual content"
        }
      }
    },
    "description": "The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example [QExpansionItem](/vue-components/expansion-item) or [QSlideItem](/vue-components/slide-item). Also [QSeparator](/vue-components/separator) can be used to split up sections, where needed.\nList Items have the following pre-built child components:\n* **QItemSection** - An item section can have several uses for particular content. They are controlled via the `avatar`, `thumbnail` and `side` props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).\n* **QItemLabel** - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself."
  },
  {
    "name": "QKnob",
    "imports": [
      "QCircularProgress",
      "TouchPan"
    ],
    "related": [
      "QCircularProgress"
    ],
    "group": "QKnob",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "type": "Number",
          "desc": "Any number to indicate the given value of the knob. Either use this property (along with a listener for 'input' event) OR use the v-model directive",
          "examples": [
            "v-model=\"myValue\""
          ],
          "category": "model"
        },
        "min": {
          "type": "Number",
          "desc": "The minimum value that the model (the knob value) should start at",
          "examples": [
            "20",
            "5"
          ],
          "category": "model"
        },
        "max": {
          "type": "Number",
          "desc": "The maximimum value that the model (the knob value) should go to",
          "examples": [
            "100",
            "50"
          ],
          "category": "model"
        },
        "step": {
          "type": "Number",
          "default": "1",
          "desc": "A number representing steps in the value of the model, while adjusting the knob",
          "examples": [
            "1",
            "5"
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "center-color": {
          "type": "String",
          "desc": "Color name for the center part of the component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "track-color": {
          "type": "String",
          "desc": "Color name for the track of the component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "font-size": {
          "type": "String",
          "desc": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size",
          "default": "0.25em",
          "examples": [
            "1em",
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "thickness": {
          "type": "Number",
          "default": 0.2,
          "desc": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size",
          "examples": [
            1,
            0.3
          ],
          "category": "style"
        },
        "angle": {
          "type": "Number",
          "desc": "Angle to rotate progress arc by",
          "default": 0,
          "examples": [
            0,
            40,
            90
          ],
          "category": "content"
        },
        "show-value": {
          "type": "Boolean",
          "desc": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component",
          "category": "content|behavior"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Number",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "change": {
          "desc": "Fires at the end of a knob's adjustment and offers the value of the model",
          "params": {
            "value": {
              "type": "Number",
              "desc": "New model value",
              "examples": [
                12
              ]
            }
          }
        },
        "drag-value": {
          "desc": "The value of the model while dragging is still in progress",
          "params": {
            "value": {
              "type": "Number",
              "desc": "New model value",
              "examples": [
                12
              ]
            }
          }
        }
      },
      "docs": {
        "page": "knob",
        "route": "vue-components",
        "apiAnchor": "QKnob-API"
      }
    },
    "description": "The QKnob component is used to take a number input from the user through mouse/touch panning. It is based on [QCircularProgress](/vue-components/circular-progress) and inherits all its properties and behavior."
  },
  {
    "name": "QLayout",
    "imports": [
      "QScrollObserver",
      "QResizeObserver"
    ],
    "related": [
      "QFooter",
      "QHeader",
      "QDrawer",
      "QPage",
      "QPageContainer",
      "QPageSticky",
      "QPageScroller",
      "QFab",
      "QFabAction"
    ],
    "group": "QLayout",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "layout",
        "apiAnchor": "QLayout-API"
      },
      "props": {
        "view": {
          "type": "String",
          "desc": "Defines how your layout components (header/footer/drawer) should be placed on screen; See docs examples",
          "default": "hhh lpr fff",
          "examples": [
            "hHh lpR fFf"
          ],
          "category": "content"
        },
        "container": {
          "type": "Boolean",
          "desc": "Containerize the layout which means it changes the default behavior of expanding to the whole window; Useful (but not limited to) for when using on a QDialog",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion: QHeader, QFooter, QDrawer, QPageContainer"
        }
      },
      "events": {
        "resize": {
          "desc": "Emitted when layout size (height, width) changes",
          "params": {
            "size": {
              "type": "Object",
              "desc": "New size",
              "definition": {
                "height": {
                  "type": "Number",
                  "desc": "Layout height",
                  "examples": [
                    575
                  ]
                },
                "width": {
                  "type": "Number",
                  "desc": "Layout height",
                  "examples": [
                    575
                  ]
                }
              }
            }
          }
        },
        "scroll": {
          "desc": "Emitted when user scrolls within layout",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Scroll details",
              "definition": {
                "position": {
                  "type": "Number",
                  "desc": "Scroll offset (from top)",
                  "examples": [
                    575
                  ]
                },
                "direction": {
                  "type": "String",
                  "desc": "Direction of scroll",
                  "values": [
                    "up",
                    "down"
                  ]
                },
                "directionChanged": {
                  "type": "Boolean",
                  "desc": "Has scroll direction changed since event was last emitted?"
                },
                "inflexionPosition": {
                  "type": "Number",
                  "desc": "Last scroll offset where scroll direction has changed",
                  "examples": [
                    575
                  ]
                }
              }
            }
          }
        },
        "scroll-height": {
          "desc": "Emitted when the scroll size of layout changes",
          "params": {
            "height": {
              "type": "Number",
              "desc": "New scroll height of layout",
              "examples": [
                1442
              ]
            }
          }
        }
      }
    },
    "description": "The QLayout is a component designed to manage the entire window and wrap page content with elements such as a navigational bar or a drawer. Multiple pages can share the same QLayout, so the code is reusable, which is one of their key points.\n**QLayout is NOT mandatory**, but it does help you to better structure your website/app. It has a number of features which offer you major benefits in simplifying your website/app's layout design, right out of the box."
  },
  {
    "name": "QMenu",
    "imports": [],
    "related": [
      "ClosePopup",
      "QPopupProxy"
    ],
    "group": "QMenu",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "target": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) it attaches the events to the specified DOM element (if it exists)",
          "default": true,
          "values": [
            true,
            false,
            "(CSS selector)"
          ],
          "examples": [
            ":target=\"false\"",
            "target=\".my-parent\""
          ],
          "category": "behavior"
        },
        "context-menu": {
          "type": "Boolean",
          "desc": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)",
          "category": "behavior"
        },
        "content-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the content",
          "examples": [
            "my-special-class",
            ":content-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the content",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ color: '#ff0000' }\""
          ],
          "category": "style"
        },
        "value": {
          "type": "Boolean",
          "desc": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model"
        },
        "fit": {
          "type": "Boolean",
          "desc": "Allows the menu to match at least the full width of its target",
          "category": "behavior"
        },
        "cover": {
          "type": "Boolean",
          "desc": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective",
          "category": "position"
        },
        "anchor": {
          "type": "String",
          "desc": "Two values setting the starting position or anchor point of the menu relative to its target",
          "values": [
            "top left",
            "top middle",
            "top right",
            "center left",
            "center middle",
            "center right",
            "bottom left",
            "bottom middle",
            "bottom right"
          ],
          "examples": [
            "top left",
            "bottom right"
          ],
          "category": "position"
        },
        "self": {
          "type": "String",
          "desc": "Two values setting the menu's own position relative to its target",
          "values": [
            "top left",
            "top middle",
            "top right",
            "center left",
            "center middle",
            "center right",
            "bottom left",
            "bottom middle",
            "bottom right"
          ],
          "examples": [
            "top left",
            "bottom right"
          ],
          "category": "position"
        },
        "offset": {
          "type": "Array",
          "desc": "An array of two numbers to offset the menu horizontally and vertically in pixels",
          "examples": [
            "[8, 8]",
            "[5, 10]"
          ],
          "category": "position"
        },
        "no-parent-event": {
          "type": "Boolean",
          "desc": "Skips attaching events to the target DOM element (that trigger the menu to get shown)",
          "category": "behavior"
        },
        "touch-position": {
          "type": "Boolean",
          "desc": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched",
          "category": "behavior"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key",
          "category": "behavior"
        },
        "auto-close": {
          "type": "Boolean",
          "desc": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap",
          "category": "behavior"
        },
        "square": {
          "type": "Boolean",
          "desc": "Forces content to have squared borders",
          "category": "style"
        },
        "no-refocus": {
          "type": "Boolean",
          "desc": "(Accessibility) When Menu gets hidden, do not refocus on the DOM element that previously had focus",
          "category": "behavior"
        },
        "no-focus": {
          "type": "Boolean",
          "desc": "(Accessibility) When Menu gets shown, do not switch focus on it",
          "category": "behavior"
        },
        "max-height": {
          "type": "String",
          "desc": "The maximimum height of the menu; Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "max-width": {
          "type": "String",
          "desc": "The maximimum width of the menu; Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "transition-show": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "transition-hide": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Boolean",
              "desc": "New state (showing/hidden)"
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "escape-key": {
          "desc": "Emitted when ESC key is pressed; Does not gets emitted if Menu is 'persistent'"
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        },
        "updatePosition": {
          "desc": "There are some custom scenarios for which Quasar cannot automatically reposition the menu without significant performance drawbacks so the optimal solution is for you to call this method when you need it"
        }
      },
      "docs": {
        "page": "menu",
        "route": "vue-components",
        "apiAnchor": "QMenu-API"
      }
    },
    "description": "The QMenu component is a convenient way to show menus. Goes very well with [QList](/vue-components/list-and-list-items) as dropdown content, but it's by no means limited to it."
  },
  {
    "name": "QOptionGroup",
    "imports": [
      "QRadio",
      "QCheckbox",
      "QToggle"
    ],
    "related": [
      "QRadio",
      "QCheckbox",
      "QToggle",
      "QBtnToggle"
    ],
    "group": "QOptionGroup",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "Any",
          "examples": [
            "v-model=\"group\""
          ]
        },
        "options": {
          "type": "Array",
          "desc": "Array of objects with value and label props. The binary components will be created according to this array",
          "examples": [
            ":options=\"[ { label: 'Option 1', value: 'op1' }, { label: 'Option 2', value: 'op2' }, { label: 'Option 3', value: 'op3' } ]\""
          ],
          "category": "model"
        },
        "type": {
          "type": "String",
          "desc": "The type of input component to be used",
          "values": [
            "radio",
            "checkbox",
            "toggle"
          ],
          "default": "radio",
          "examples": [
            "checkbox"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "keep-color": {
          "type": "Boolean",
          "desc": "Should the color (if specified any) be kept when input components are unticked?",
          "category": "behavior"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "left-label": {
          "type": "Boolean",
          "desc": "Label (if any specified) should be displayed on the left side of the input components",
          "category": "content"
        },
        "inline": {
          "type": "Boolean",
          "desc": "Show input components as inline-block rather than each having their own row",
          "category": "content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "docs": {
        "page": "option-group",
        "route": "vue-components",
        "apiAnchor": "QOptionGroup-API"
      }
    },
    "description": "The QOptionGroup component is a helper component that allows you better control for grouping binary (on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good use for this component is for offering a set of options or settings to turn on and off."
  },
  {
    "name": "QPageScroller",
    "imports": [
      "QPageSticky"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QPageScroller",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "page-scroller",
        "apiAnchor": "QPageSticky-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "position": {
          "type": "String",
          "desc": "Page side/corner to stick to",
          "default": "bottom-right",
          "values": [
            "top-right",
            "top-left",
            "bottom-right",
            "bottom-left",
            "top",
            "right",
            "bottom",
            "left"
          ],
          "examples": [
            "top-right"
          ],
          "category": "position"
        },
        "offset": {
          "type": "Array",
          "desc": "An array of two numbers to offset the component horizontally and vertically in pixels",
          "examples": [
            "[8, 8]",
            "[5, 10]"
          ],
          "category": "content",
          "default": [
            18,
            18
          ]
        },
        "expand": {
          "type": "Boolean",
          "desc": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop",
          "category": "content"
        },
        "scroll-offset": {
          "type": "Number",
          "desc": "Scroll offset (in pixels) from which point the component is shown on page",
          "default": 1000,
          "examples": [
            550
          ],
          "category": "behavior"
        },
        "duration": {
          "type": "Number",
          "desc": "Duration (in milliseconds) of the scrolling until it reaches its target",
          "default": 300,
          "examples": [
            500
          ],
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      }
    },
    "description": "The QPageScroller component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls.\nThe great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or drawer(s), even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won't occur.\nTry it out with a non-fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won't overlap with the footer.\nEssentially QPageScroller is very similar to QPageSticky. Whereas a QPageSticky componet is always visible a QPageScroller component only appears after a `scroll-offset` (property) is reached. Once visible, the user can click on it to quickly get back to the top of the page via `duration` property."
  },
  {
    "name": "QPageSticky",
    "imports": [],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QLayout",
    "api": {
      "type": "component",
      "docs": {
        "route": "layout",
        "page": "page-sticky",
        "apiAnchor": "QPageSticky-API"
      },
      "props": {
        "position": {
          "type": "String",
          "desc": "Page side/corner to stick to",
          "default": "bottom-right",
          "values": [
            "top-right",
            "top-left",
            "bottom-right",
            "bottom-left",
            "top",
            "right",
            "bottom",
            "left"
          ],
          "examples": [
            "top-right"
          ],
          "category": "position"
        },
        "offset": {
          "type": "Array",
          "desc": "An array of two numbers to offset the component horizontally and vertically in pixels",
          "examples": [
            "[8, 8]",
            "[5, 10]"
          ],
          "category": "position"
        },
        "expand": {
          "type": "Boolean",
          "desc": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      }
    },
    "description": "The QPageSticky component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls.\nThe great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or drawer(s), even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won't occur.\nTry it out with a non-fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won't overlap with the footer."
  },
  {
    "name": "QPagination",
    "imports": [
      "QBtn",
      "QInput"
    ],
    "related": [],
    "group": "QPagination",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Number",
          "desc": "Current page (must be between min/max)",
          "required": true,
          "examples": [
            3
          ],
          "category": "model"
        },
        "min": {
          "type": "Number",
          "desc": "Minimum page (must be lower than 'max')",
          "default": 1,
          "examples": [
            3
          ],
          "category": "model"
        },
        "max": {
          "type": "Number",
          "desc": "Number of last page (must be higher than 'min')",
          "default": 100,
          "required": true,
          "examples": [
            10
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style",
          "default": "primary"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Button size in CSS units, including unit name",
          "examples": [
            "20px"
          ],
          "category": "style"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "input": {
          "type": "Boolean",
          "desc": "Use an input instead of buttons",
          "category": "content"
        },
        "boundary-links": {
          "type": "Boolean",
          "desc": "Show boundary button links",
          "category": "content"
        },
        "boundary-numbers": {
          "type": "Boolean",
          "desc": "Always show first and last page buttons (if not using 'input')",
          "category": "content"
        },
        "direction-links": {
          "type": "Boolean",
          "desc": "Show direction buttons",
          "category": "content"
        },
        "ellipses": {
          "type": "Boolean",
          "desc": "Show ellipses (...) when pages are available",
          "category": "content"
        },
        "max-pages": {
          "type": "Number",
          "default": 0,
          "desc": "Maximum number of page links to display at a time; 0 means Infinite",
          "examples": [
            5
          ],
          "category": "model"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "String",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "methods": {
        "set": {
          "desc": "Go directly to the specified page",
          "params": {
            "pageNumber": {
              "type": "Number",
              "desc": "Page number to go to",
              "examples": [
                3
              ]
            }
          }
        },
        "setOffset": {
          "desc": "Increment/Decrement current page by offset",
          "params": {
            "offset": {
              "type": "Number",
              "desc": "Offset page, can be negative or positive",
              "examples": [
                3
              ]
            }
          }
        }
      },
      "docs": {
        "page": "pagination",
        "route": "vue-components",
        "apiAnchor": "QPagination-API"
      }
    },
    "description": "The QPagination component is available for whenever a pagination system is required. It offers the user a simple UI for moving between items or pages.\nThere are two modes in which QPagination operates: with buttons only or with an inputbox. The latter allows the user to go to a specific page by clicking/tapping on the inputbox, typing the page number then hitting Enter key. If the new page number is within valid limits, the model will be changed accordingly."
  },
  {
    "name": "QPopupEdit",
    "imports": [
      "QMenu",
      "QBtn"
    ],
    "related": [
      "QInput",
      "QMenu"
    ],
    "group": "QPopupEdit",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "Any",
          "examples": [
            "v-model=\"myValue\""
          ]
        },
        "title": {
          "type": "String",
          "desc": "Optional title (unless 'title' slot is used)",
          "examples": [
            "Calories"
          ],
          "category": "content"
        },
        "buttons": {
          "type": "Boolean",
          "desc": "Show Set and Cancel buttons",
          "category": "content"
        },
        "label-set": {
          "type": "String",
          "desc": "Override Set button label",
          "examples": [
            "OK"
          ],
          "category": "content"
        },
        "label-cancel": {
          "type": "String",
          "desc": "Override Cancel button label",
          "examples": [
            "Cancel"
          ],
          "category": "content"
        },
        "persistent": {
          "type": "Boolean",
          "desc": "Avoid Popup closing by hitting ESC key or by clicking/tapping outside of the Popup",
          "category": "behavior"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style",
          "default": "primary"
        },
        "content-class": {
          "type": "String",
          "desc": "Class definitions to be attributed to the content",
          "examples": [
            "my-special-class"
          ],
          "category": "style"
        },
        "content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the content",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "validate": {
          "type": "Function",
          "desc": "Validates model then triggers 'save' and closes Popup; Returns a Boolean ('true' means valid, 'false' means abort); Syntax: validate(value)",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Model to validate",
              "examples": [
                "My car"
              ]
            }
          },
          "returns": {
            "type": "Boolean",
            "desc": "Is the model valid or not?"
          },
          "examples": [
            ":validate=\"myValidation\""
          ],
          "category": "model"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "Used for injecting the form component"
        },
        "title": {
          "desc": "Slot for custom title (overrides 'title' prop when used)"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when Popup gets cancelled in order to reset model to its initial value; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "show": {
          "desc": "Emitted right after Popup gets shown"
        },
        "hide": {
          "desc": "Emitted right after Popup gets dismissed"
        },
        "save": {
          "desc": "Emitted when value has been successfully validated and it should be saved",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Validated value to be saved"
            },
            "initialValue": {
              "type": "Any",
              "desc": "Initial value, before changes"
            }
          }
        },
        "cancel": {
          "desc": "Emitted when user cancelled the change (hit ESC key or clicking outside of Popup or hit 'Cancel' button)",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Edited value"
            },
            "initialValue": {
              "type": "Any",
              "desc": "Initial value, before changes"
            }
          }
        }
      },
      "methods": {
        "set": {
          "desc": "Trigger a model update; Validates model (and emits 'save' event if it's the case) then closes Popup"
        },
        "cancel": {
          "desc": "Triggers a model reset to its initial value ('cancel' event is emitted) then closes Popup"
        }
      },
      "docs": {
        "page": "popup-edit",
        "route": "vue-components",
        "apiAnchor": "QPopupEdit-API"
      }
    },
    "description": "The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield.\nThis component injects a [QMenu](/vue-components/menu) into its parent DOM element and enables the behavior described above, so **it can be used anywhere**, not only in QTable."
  },
  {
    "name": "QPopupProxy",
    "imports": [
      "QDialog",
      "QMenu"
    ],
    "related": [
      "QMenu",
      "QDialog",
      "ClosePopup"
    ],
    "group": "QPopupProxy",
    "api": {
      "type": "component",
      "props": {
        "target": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) it attaches the events to the specified DOM element (if it exists)",
          "default": true,
          "values": [
            true,
            false,
            "(CSS selector)"
          ],
          "examples": [
            ":target=\"false\"",
            "target=\".my-parent\""
          ],
          "category": "behavior"
        },
        "context-menu": {
          "type": "Boolean",
          "desc": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)",
          "category": "behavior"
        },
        "value": {
          "type": "Boolean",
          "desc": "Defines the state of the component (shown/hidden); Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model"
        },
        "breakpoint": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Breakpoint (in pixels) of window width from where a Menu will get to be used instead of a Dialog",
          "default": 450,
          "examples": [
            992,
            ":breakpoint=\"1024\""
          ],
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "before-show": {
          "desc": "Emitted when component triggers show() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "show": {
          "desc": "Emitted after component has triggered show()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "before-hide": {
          "desc": "Emitted when component triggers hide() but before it finishes doing it",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        },
        "hide": {
          "desc": "Emitted after component has triggered hide()",
          "params": {
            "evt": {
              "type": "Object",
              "desc": "JS event object",
              "required": true
            }
          }
        }
      },
      "methods": {
        "show": {
          "desc": "Triggers component to show",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "hide": {
          "desc": "Triggers component to hide",
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          }
        },
        "toggle": {
          "params": {
            "evt": {
              "type": "Object",
              "required": false,
              "desc": "JS event object"
            }
          },
          "desc": "Triggers component to toggle between show/hide"
        }
      },
      "docs": {
        "page": "popup-proxy",
        "route": "vue-components",
        "apiAnchor": "QPopupProxy-API"
      }
    },
    "description": "QPopupProxy should be used when you need either a [QMenu](/vue-components/menu) (on bigger screens) or a [QDialog](/vue-components/dialog) (on smaller screens) to be displayed. It acts as a proxy which picks between what of the two components to use. QPopupProxy also handles context-menus."
  },
  {
    "name": "QPullToRefresh",
    "imports": [
      "QIcon",
      "QSpinner",
      "TouchPan"
    ],
    "related": [
      "QInfiniteScroll",
      "QIcon"
    ],
    "group": "QPullToRefresh",
    "api": {
      "type": "component",
      "props": {
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon to display when refreshing the content",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "no-mouse": {
          "type": "Boolean",
          "desc": "Don't listen for mouse events",
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "Content (area controlled by the component) goes here"
        }
      },
      "events": {
        "refresh": {
          "desc": "Called whenever a refresh is triggered; at this time, your function should load more data",
          "params": {
            "done": {
              "type": "Function",
              "desc": "Call the done() function when your data has been refreshed",
              "params": null,
              "returns": null
            }
          }
        }
      },
      "methods": {
        "trigger": {
          "desc": "Triggers a refresh"
        },
        "updateScrollTarget": {
          "desc": "Updates the scroll target; Useful when the parent elements change so that the scrolling target also changes"
        }
      },
      "docs": {
        "page": "pull-to-refresh",
        "route": "vue-components",
        "apiAnchor": "QPullToRefresh-API"
      }
    },
    "description": "The QPullToRefresh is a component that allows the user to pull down in order to refresh page content (or retrieve the newest content)."
  },
  {
    "name": "QRadio",
    "imports": [],
    "related": [
      "QOptionGroup",
      "QBtnToggle",
      "QCheckbox",
      "QToggle"
    ],
    "group": "QRadio",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": [
            "Number",
            "String"
          ],
          "required": true,
          "examples": [
            "v-model=\"option\""
          ]
        },
        "val": {
          "type": [
            "Number",
            "String"
          ],
          "required": true,
          "desc": "The actual value of the option with which model value is changed",
          "examples": [
            "opt1",
            50
          ],
          "category": "model"
        },
        "label": {
          "type": "String",
          "desc": "Label to display along the radio control (or use the default slot instead of this prop)",
          "examples": [
            "label=\"Option 1\""
          ],
          "category": "label"
        },
        "left-label": {
          "type": "Boolean",
          "desc": "Label (if any specified) should be displayed on the left side of the checkbox",
          "category": "label"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "keep-color": {
          "type": "Boolean",
          "desc": "Should the color (if specified any) be kept when checkbox is unticked?",
          "category": "behavior"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "methods": {
        "set": {
          "desc": "Sets the Radio's v-model to equal the val"
        }
      },
      "docs": {
        "page": "radio",
        "route": "vue-components",
        "apiAnchor": "QRadio-API"
      }
    },
    "description": "The QRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  {
    "name": "QRating",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QRating",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "Number",
          "examples": [
            ":value=\"2\""
          ]
        },
        "max": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Number of icons to display",
          "default": 5,
          "examples": [
            "3",
            ":max=\"5\""
          ],
          "category": "general"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "no-reset": {
          "type": "Boolean",
          "desc": "When used, disables default behavior of clicking/tapping on icon which represents current model value to reset model to 0",
          "category": "model"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "docs": {
        "page": "rating",
        "route": "vue-components",
        "apiAnchor": "QRating-API"
      }
    },
    "description": "Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”."
  },
  {
    "name": "QResizeObserver",
    "imports": [],
    "related": [
      "QScrollObserver"
    ],
    "group": "QObserver",
    "api": {
      "type": "component",
      "props": {
        "debounce": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Debounce amount (in milliseconds)",
          "default": 100,
          "examples": [
            "0",
            "530"
          ],
          "category": "behavior"
        }
      },
      "events": {
        "resize": {
          "desc": "Parent element has resized (width or height changed)",
          "params": {
            "size": {
              "type": "Object",
              "desc": "New size",
              "definition": {
                "height": {
                  "type": "Number",
                  "desc": "Layout height",
                  "examples": [
                    822
                  ]
                },
                "width": {
                  "type": "Number",
                  "desc": "Layout height",
                  "examples": [
                    822
                  ]
                }
              }
            }
          }
        }
      },
      "methods": {
        "trigger": {
          "desc": "Emit a 'resize' event",
          "params": {
            "immediately": {
              "type": "Boolean",
              "desc": "Skip over the debounce amount"
            }
          }
        }
      },
      "docs": {
        "page": "resize-observer",
        "route": "vue-components",
        "apiAnchor": "QResizeObserver-API"
      }
    },
    "description": "QResizeObserver is a Quasar component that emits a `resize` event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too."
  },
  {
    "name": "QRouteTab",
    "imports": [
      "QTab"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "api": {
      "type": "component",
      "docs": {
        "page": "tabs",
        "route": "vue-components",
        "apiAnchor": "QRouteTab-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "to": {
          "type": [
            "String",
            "Object"
          ],
          "desc": "Equivalent to Vue Router <router-link> 'to' property",
          "examples": [
            "/home/dashboard",
            ":to=\"{ name: 'my-route-name' }\""
          ],
          "category": "general",
          "required": true
        },
        "exact": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'exact' property",
          "category": "behavior"
        },
        "append": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'append' property",
          "category": "behavior"
        },
        "replace": {
          "type": "Boolean",
          "desc": "Equivalent to Vue Router <router-link> 'replace' property",
          "category": "behavior"
        },
        "active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-active-class"
          ],
          "category": "behavior"
        },
        "exact-active-class": {
          "type": "String",
          "desc": "Equivalent to Vue Router <router-link> 'active-class' property",
          "examples": [
            "my-exact-active-class"
          ],
          "category": "behavior"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "label": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "A number or string to label the tab",
          "examples": [
            "Home"
          ],
          "category": "content"
        },
        "alert": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color",
          "examples": [
            "alert",
            "alert=\"purple\""
          ],
          "category": "content"
        },
        "name": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Panel name",
          "default": "A random UID",
          "examples": [
            "home",
            ":name=\"1\""
          ],
          "category": "general"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Turns off capitalizing all letters within the tab (which is the default)",
          "category": "content"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion: QMenu, QTooltip"
        }
      }
    },
    "description": "Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to [Layouts](/layout/layout) and [Header & Footer](/layout/header-and-footer#Example--Playing-with-QTabs) for references."
  },
  {
    "name": "QScrollArea",
    "imports": [
      "QResizeObserver",
      "QScrollObserver",
      "TouchPan"
    ],
    "related": [
      "QDrawer"
    ],
    "group": "QScrollArea",
    "api": {
      "type": "component",
      "props": {
        "thumb-style": {
          "type": "Object",
          "desc": "Object with CSS properties and values for styling the thumb of custom scrollbar",
          "examples": [
            ":thumb-style=\"{ right: '4px', borderRadius: '5px', background: 'red', width: '10px', opacity: 1 }\""
          ],
          "category": "style"
        },
        "content-style": {
          "type": "Object",
          "desc": "Object with CSS properties and values for styling the container of QScrollArea",
          "examples": [
            ":content-style=\"{ backgroundColor: '#C0C0C0' }\""
          ],
          "category": "style"
        },
        "content-active-style": {
          "type": "Object",
          "desc": "Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered)",
          "examples": [
            ":content-active-style=\"{ backgroundColor: 'white' }\""
          ],
          "category": "style"
        },
        "delay": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "When content changes, the scrollbar appears; this delay defines the amount of time (in milliseconds) before scrollbars dissapear again (if component is not hovered)",
          "default": 1000,
          "examples": [
            500,
            ":delay=\"550\""
          ],
          "category": "behavior"
        },
        "horizontal": {
          "type": "Boolean",
          "desc": "Register for horizontal scroll instead of vertical (which is default)",
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "methods": {
        "setScrollPosition": {
          "desc": "Set scroll position to an offset; If a duration (in milliseconds) is specified then the scroll is animated",
          "params": {
            "offset": {
              "type": "Number",
              "desc": "Scroll position offset from top (in pixels)",
              "required": true,
              "examples": [
                220
              ]
            },
            "duration": {
              "type": "Number",
              "desc": "Duration (in milliseconds) enabling animated scroll",
              "examples": [
                300
              ]
            }
          }
        }
      },
      "docs": {
        "page": "scroll-area",
        "route": "vue-components",
        "apiAnchor": "QScrollArea-API"
      }
    },
    "description": "The QScrollArea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has `overflow: auto`, but with your own custom styled scrollbar instead of browser's default one and a few nice features on top.\nThis is especially useful for desktop as scrollbars are hidden on a mobile device. When on a mobile device, QScrollArea simply wraps the content in a `<div>` configured for default browser scrolling."
  },
  {
    "name": "QScrollObserver",
    "imports": [],
    "related": [
      "QResizeObserver"
    ],
    "group": "QObserver",
    "api": {
      "type": "component",
      "props": {
        "debounce": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Debounce amount (in milliseconds)",
          "examples": [
            "0",
            "530"
          ],
          "category": "behavior"
        },
        "horizontal": {
          "type": "Boolean",
          "desc": "Register for horizontal scroll instead of vertical (which is default)",
          "category": "behavior"
        }
      },
      "events": {
        "scroll": {
          "desc": "Emitted when scroll position changes",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Scroll details",
              "definition": {
                "position": {
                  "type": "Number",
                  "desc": "Scroll offset (from top)",
                  "examples": [
                    822
                  ]
                },
                "direction": {
                  "type": "String",
                  "desc": "Direction of scroll",
                  "values": [
                    "up",
                    "down"
                  ]
                },
                "directionChanged": {
                  "type": "Boolean",
                  "desc": "Has scroll direction changed since event was last emitted?"
                },
                "inflexionPosition": {
                  "type": "Number",
                  "desc": "Last scroll offset where scroll direction has changed",
                  "examples": [
                    822
                  ]
                }
              }
            }
          }
        }
      },
      "methods": {
        "trigger": {
          "desc": "Emit a 'scroll' event",
          "params": {
            "immediately": {
              "type": "Boolean",
              "desc": "Skip over the debounce amount"
            }
          }
        },
        "getPosition": {
          "desc": "Get current scroll details under the form of an Object: { position, direction, directionChanged, inflexionPosition }"
        }
      },
      "docs": {
        "page": "scroll-observer",
        "route": "vue-components",
        "apiAnchor": "QScrollObserver-API"
      }
    },
    "description": "QScrollObserver is a Quasar component that emits a `scroll` event whenever the user scrolls the page or overflowed container with `.scroll` CSS class applied to it."
  },
  {
    "name": "QSelect",
    "imports": [
      "QField",
      "QIcon",
      "QChip",
      "QItem",
      "QItemSection",
      "QItemLabel",
      "QMenu",
      "QDialog"
    ],
    "related": [],
    "group": "QSelect",
    "api": {
      "type": "component",
      "props": {
        "error": {
          "type": "Boolean",
          "desc": "Does field has validation errors?",
          "category": "behavior"
        },
        "error-message": {
          "type": "String",
          "desc": "Validation error message (gets displayed only if 'error' is set to 'true')",
          "examples": [
            "Username must have at least 5 characters"
          ],
          "category": "content"
        },
        "no-error-icon": {
          "type": "Boolean",
          "desc": "Hide error icon when there is an error",
          "category": "content"
        },
        "rules": {
          "type": "Array",
          "desc": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules",
          "examples": [
            ":rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"",
            ":rules=\"[ 'fulltime' ]\""
          ],
          "category": "behavior"
        },
        "lazy-rules": {
          "type": "Boolean",
          "desc": "Check validation status against the 'rules' only after field loses focus for first time",
          "category": "behavior"
        },
        "label": {
          "type": "String",
          "desc": "A text label that will “float” up above the input field, once the field gets focus",
          "examples": [
            "Username"
          ],
          "category": "content"
        },
        "stack-label": {
          "type": "Boolean",
          "desc": "Label will be always shown above the field regardless of field content (if any)",
          "category": "content"
        },
        "hint": {
          "type": "String",
          "desc": "Helper (hint) text which gets placed below your wrapped form component",
          "examples": [
            "Fill in between 3 and 12 characters"
          ],
          "category": "content"
        },
        "hide-hint": {
          "type": "Boolean",
          "desc": "Hide the helper (hint) text when field doesn't have focus",
          "category": "content"
        },
        "prefix": {
          "type": "String",
          "desc": "Prefix",
          "examples": [
            "$"
          ],
          "category": "content"
        },
        "suffix": {
          "type": "String",
          "desc": "Suffix",
          "examples": [
            "@gmail.com"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "bg-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "loading": {
          "type": "Boolean",
          "desc": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
          "category": "behavior|content"
        },
        "clearable": {
          "type": "Boolean",
          "desc": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
          "category": "behavior|content"
        },
        "clear-icon": {
          "type": "String",
          "desc": "Custom icon to use for the clear button when using along with 'clearable' prop",
          "examples": [
            "close"
          ],
          "category": "content"
        },
        "filled": {
          "type": "Boolean",
          "desc": "Use 'filled' design for the field",
          "category": "style"
        },
        "outlined": {
          "type": "Boolean",
          "desc": "Use 'outlined' design for the field",
          "category": "style"
        },
        "borderless": {
          "type": "Boolean",
          "desc": "Use 'borderless' design for the field",
          "category": "style"
        },
        "standout": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)",
          "examples": [
            "standout",
            "standout=\"bg-primary text-white\""
          ],
          "category": "style"
        },
        "bottom-slots": {
          "type": "Boolean",
          "desc": "Enables bottom slots ('error', 'hint', 'counter')",
          "category": "content"
        },
        "hide-bottom-space": {
          "type": "Boolean",
          "desc": "Does not reserves space for hint/error/counter anymore when these are not used; as a result, it also disables the animation for those",
          "category": "style"
        },
        "counter": {
          "type": "Boolean",
          "desc": "Show an automatic counter on bottom right",
          "category": "content"
        },
        "rounded": {
          "type": "Boolean",
          "desc": "Applies a small standard border-radius for a squared shape of the component",
          "category": "style"
        },
        "square": {
          "type": "Boolean",
          "desc": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "items-aligned": {
          "type": "Boolean",
          "desc": "Align content to match QItem",
          "category": "content"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "autofocus": {
          "type": "Boolean",
          "desc": "Focus field on initial component render",
          "category": "behavior"
        },
        "value": {
          "type": [
            "Number",
            "String",
            "Array"
          ],
          "desc": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "required": true,
          "examples": [
            "v-model=\"myModel\""
          ],
          "category": "model"
        },
        "multiple": {
          "type": "Boolean",
          "desc": "Allow multiple selection; Model must be Array",
          "category": "model|selection"
        },
        "display-value": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop",
          "examples": [
            "Options: x, y, z"
          ],
          "category": "selection"
        },
        "display-value-sanitize": {
          "type": "Boolean",
          "default": "false",
          "desc": "Force use of textContent instead of innerHTML to render selected option(s); Use it when the selected option(s) might be unsafe (from user input); Does NOT apply when using 'selected' or 'selected-item' slots!",
          "category": "selection"
        },
        "options": {
          "type": "Array",
          "desc": "Available options that the user can select from",
          "default": "[]",
          "examples": [
            ":options=\"[ 'BMW', 'Samsung Phone' ]\"",
            ":options=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\""
          ],
          "category": "options"
        },
        "option-value": {
          "type": [
            "Function",
            "String"
          ],
          "desc": "Property of option which holds the 'value'",
          "default": "value",
          "examples": [
            "option-value=\"modelNumber\"",
            ":option-value=\"(item) => item.modelNumber\""
          ],
          "category": "options"
        },
        "option-label": {
          "type": [
            "Function",
            "String"
          ],
          "desc": "Property of option which holds the 'label'",
          "default": "label",
          "examples": [
            "option-label=\"itemName\"",
            ":option-label=\"(item) => item.itemName\""
          ],
          "category": "options"
        },
        "option-disable": {
          "type": [
            "Function",
            "String"
          ],
          "desc": "Property of option which tells it's disabled; The value of the property must be a Boolean",
          "default": "disable",
          "examples": [
            "option-disable=\"cannotSelect\"",
            ":option-disable=\"(item) => item.cannotSelect\""
          ],
          "category": "options"
        },
        "hide-selected": {
          "type": "Boolean",
          "desc": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects",
          "category": "selection"
        },
        "hide-dropdown-icon": {
          "type": "Boolean",
          "desc": "Hides dropdown icon",
          "category": "content|behavior"
        },
        "dropdown-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "max-values": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Allow a maximum number of selections that the user can do",
          "examples": [
            "5"
          ],
          "category": "selection"
        },
        "options-dense": {
          "type": "Boolean",
          "desc": "Dense mode for options list; occupies less space",
          "category": "options"
        },
        "options-dark": {
          "type": "Boolean",
          "desc": "Options menu will be colored with a dark color",
          "category": "options"
        },
        "options-selected-class": {
          "type": "String",
          "desc": "CSS class name for options that are active/selected",
          "examples": [
            "text-orange"
          ],
          "category": "options"
        },
        "options-cover": {
          "type": "Boolean",
          "desc": "Expanded menu will cover the component",
          "category": "options"
        },
        "options-sanitize": {
          "type": "Boolean",
          "default": "false",
          "desc": "Force use of textContent instead of innerHTML to render options; Use it when the options might be unsafe (from user input); Does NOT applies when using 'option' slot!",
          "category": "options"
        },
        "popup-content-class": {
          "type": "String",
          "desc": "Class definitions to be attributed to the popup content",
          "examples": [
            "my-special-class"
          ],
          "category": "style"
        },
        "popup-content-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the popup content",
          "examples": [
            "background-color: #ff0000",
            ":content-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "use-input": {
          "type": "Boolean",
          "desc": "Use an input tag where users can type",
          "category": "content"
        },
        "use-chips": {
          "type": "Boolean",
          "desc": "Use QChip to show what is currently selected",
          "category": "selection"
        },
        "new-value-mode": {
          "type": "String",
          "desc": "Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for @new-value becomes optional (only to override the behavior defined by 'new-value-mode')",
          "values": [
            "add",
            "add-unique",
            "toggle"
          ],
          "category": "behavior"
        },
        "map-options": {
          "type": "Boolean",
          "desc": "Try to map labels of model from 'options' Array; has a small performance penalty",
          "category": "options"
        },
        "emit-value": {
          "type": "Boolean",
          "desc": "Update model with the value of the selected option instead of the whole option",
          "category": "model"
        },
        "input-debounce": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Debounce the input model update with an amount of milliseconds",
          "default": 500,
          "examples": [
            650
          ],
          "category": "content"
        },
        "transition-show": {
          "type": "String",
          "desc": "Transition when showing the menu; One of Quasar's embedded transitions; Works only if \"cover-options\" is not used",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        },
        "transition-hide": {
          "type": "String",
          "desc": "Transition when hiding the menu; One of Quasar's embedded transitions; Works only if \"cover-options\" is not used",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "fade"
        }
      },
      "slots": {
        "default": {
          "desc": "Field main content"
        },
        "prepend": {
          "desc": "Prepend inner field; Suggestions: QIcon, QBtn"
        },
        "append": {
          "desc": "Append to inner field; Suggestions: QIcon, QBtn"
        },
        "before": {
          "desc": "Prepend outer field; Suggestions: QIcon, QBtn"
        },
        "after": {
          "desc": "Append outer field; Suggestions: QIcon, QBtn"
        },
        "error": {
          "desc": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "hint": {
          "desc": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "counter": {
          "desc": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
        },
        "loading": {
          "desc": "Override default spinner when component is in loading mode; Suggestion: spinners"
        },
        "selected": {
          "desc": "Override default selection slot; Suggestion: QChip"
        }
      },
      "scopedSlots": {
        "no-option": {
          "desc": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
          "scope": {
            "inputValue": {
              "type": "String",
              "desc": "Input textfield value, if any (not QSelect model)",
              "examples": [
                "typed something"
              ]
            }
          }
        },
        "selected-item": {
          "desc": "Override default selection slot; Suggestion: QChip",
          "scope": {
            "index": {
              "type": "Number",
              "desc": "Selection index",
              "examples": [
                0
              ]
            },
            "opt": {
              "type": "Any",
              "desc": "Selected option -- its value is taken from model"
            },
            "selected": {
              "type": "Boolean",
              "desc": "Always true -- passed down as prop to QItem (when using QItem)"
            },
            "removeAtIndex": {
              "type": "Function",
              "desc": "Remove selected option located at specific index",
              "params": {
                "index": {
                  "type": "Number",
                  "desc": "Index at which to remove selection",
                  "examples": [
                    0
                  ]
                }
              },
              "returns": null
            },
            "toggleOption": {
              "type": "Function",
              "desc": "Add/remove option from model",
              "params": {
                "opt": {
                  "type": "Any",
                  "desc": "Option to add to model"
                }
              },
              "returns": null
            },
            "tabindex": {
              "type": "Number",
              "desc": "Tabindex HTML attribute value associated with respective option",
              "values": [
                0,
                -1
              ]
            }
          }
        },
        "option": {
          "desc": "Customize how options are rendered; Suggestion: QItem",
          "scope": {
            "index": {
              "type": "Number",
              "desc": "Option index",
              "examples": [
                0
              ]
            },
            "opt": {
              "type": "Any",
              "desc": "Option -- its value is taken from 'options' prop"
            },
            "selected": {
              "type": "Boolean",
              "desc": "Is option selected?"
            },
            "focused": {
              "type": "Boolean",
              "desc": "Is option focused?"
            },
            "toggleOption": {
              "type": "Function",
              "desc": "Add/remove option from model",
              "params": {
                "opt": {
                  "type": "Any",
                  "desc": "Option to add to model"
                }
              },
              "returns": null
            },
            "setOptionIndex": {
              "type": "Function",
              "desc": "Sets option from menu as 'focused'",
              "params": {
                "index": {
                  "type": "Number",
                  "desc": "Index of option from menu",
                  "examples": [
                    10
                  ]
                }
              },
              "returns": null
            },
            "itemProps": {
              "type": "Object",
              "desc": "Computed properties passed down to QItem"
            },
            "itemEvents": {
              "type": "Object",
              "desc": "Computed events passed down to QItem"
            }
          }
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "remove": {
          "desc": "Emitted when an option is removed from selection",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Removal details",
              "definition": {
                "index": {
                  "type": "Number",
                  "desc": "Model index at which removal took place",
                  "examples": [
                    2
                  ]
                },
                "value": {
                  "type": "Any",
                  "desc": "The actual value that was removed"
                }
              }
            }
          }
        },
        "add": {
          "desc": "Emitted when an option is added to the selection",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Addition details",
              "definition": {
                "index": {
                  "type": "Number",
                  "desc": "Model index at which addition took place",
                  "examples": [
                    2
                  ]
                },
                "value": {
                  "type": "Any",
                  "desc": "The actual value that was added"
                }
              }
            }
          }
        },
        "new-value": {
          "desc": "Enables creation of new values; Emitted when a new value has been created; You can override 'new-value-mode' property with it",
          "params": {
            "inputValue": {
              "type": "String",
              "desc": "What the user typed",
              "examples": [
                "phone"
              ]
            },
            "doneFn": {
              "type": "Function",
              "desc": "Adds (optional) value to the model; Do not forget to call it after you validate the newly created value; Call it with no parameters if nothing should be added",
              "params": {
                "item": {
                  "type": "Any",
                  "desc": "Item to add"
                },
                "mode": {
                  "type": "String",
                  "desc": "Override 'new-value-mode' (prop) behavior should you wish to",
                  "values": [
                    "add",
                    "add-unique",
                    "toggle"
                  ],
                  "default": "add"
                }
              },
              "returns": null
            }
          }
        },
        "filter": {
          "desc": "Emitted when user wants to filter a value",
          "params": {
            "inputValue": {
              "type": "String",
              "desc": "What the user typed",
              "examples": [
                "phone"
              ]
            },
            "doneFn": {
              "type": "Function",
              "desc": "Supply a function which makes the necessary updates",
              "params": {
                "callbackFn": {
                  "type": "Function",
                  "desc": "Callback to call to make the actual updates",
                  "params": null,
                  "returns": null
                }
              },
              "returns": null
            },
            "abortFn": {
              "type": "Function",
              "desc": "Call this function if something went wrong",
              "params": null,
              "returns": null
            }
          }
        },
        "filter-abort": {
          "desc": "Emitted when a filtering was aborted; Probably a new one was requested?"
        }
      },
      "methods": {
        "resetValidation": {
          "desc": "Reset validation status"
        },
        "validate": {
          "desc": "Trigger a validation",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Optional value to validate against"
            }
          }
        },
        "focus": {
          "desc": "Focus component"
        },
        "removeAtIndex": {
          "desc": "Remove selected option located at specific index",
          "params": {
            "index": {
              "type": "Number",
              "desc": "Index at which to remove selection",
              "required": true,
              "examples": [
                0
              ]
            }
          }
        },
        "add": {
          "desc": "Adds option to model",
          "params": {
            "opt": {
              "type": "Any",
              "desc": "Option to add to model",
              "required": true
            }
          }
        },
        "toggleOption": {
          "desc": "Add/remove option from model",
          "params": {
            "opt": {
              "type": "Any",
              "desc": "Option to add to model",
              "required": true
            }
          }
        },
        "setOptionIndex": {
          "desc": "Sets option from menu as 'focused'",
          "params": {
            "index": {
              "type": "Number",
              "desc": "Index of option from menu",
              "required": true,
              "examples": [
                10
              ]
            }
          }
        },
        "filter": {
          "desc": "Filter options",
          "params": {
            "value": {
              "type": "String",
              "desc": "String to filter with",
              "required": true,
              "examples": [
                "car"
              ]
            }
          }
        },
        "updateMenuPosition": {
          "desc": "Recomputes menu position"
        },
        "updateInputValue": {
          "desc": "If 'use-input' is specified, this updates the value that it holds",
          "params": {
            "value": {
              "type": "String",
              "desc": "String to set the input value to",
              "examples": [
                "hotel"
              ]
            },
            "noFilter": {
              "type": "Boolean",
              "desc": "Set to true if you don't want the filter (if any) to be also triggered"
            }
          }
        }
      },
      "docs": {
        "page": "select",
        "route": "vue-components",
        "apiAnchor": "QSelect-API"
      }
    },
    "description": "The QSelect component has two types of selection: single or multiple. This component opens up a Popover for the selection list and action. A filter can also be used for longer lists.\nIn case you are looking for a dropdown \"button\" instead of \"input\" use [Button Dropdown](/vue-components/button-dropdown) instead."
  },
  {
    "name": "QSeparator",
    "imports": [],
    "related": [],
    "group": "QSeparator",
    "api": {
      "type": "component",
      "docs": {
        "apiAnchor": "API",
        "page": "separator",
        "route": "vue-components"
      },
      "props": {
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "spaced": {
          "type": "Boolean",
          "desc": "If set to true, the top and bottom margins will be set to 8px",
          "category": "content"
        },
        "inset": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "if set to true, the left and right margins will be set to 16px. If set to item, the left and right margins will be set to 72px. If set to item-thumbnail, the left margin is set to 116px and right margin is set to 0px",
          "examples": [
            "item",
            "item-thumbnail"
          ],
          "category": "content"
        },
        "vertical": {
          "type": "Boolean",
          "desc": "If set to true, the separator will be vertical.",
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        }
      }
    },
    "description": "The QSeparator Component is used to separate sections of text, other components, etc... It creates a colored line across the width of the parent. It can be horizontal or vertical."
  },
  {
    "name": "QSlideItem",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList",
      "QExpansionItem"
    ],
    "group": "QList",
    "api": {
      "type": "component",
      "props": {
        "left-color": {
          "type": "String",
          "desc": "Color name for left-side background from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "right-color": {
          "type": "String",
          "desc": "Color name for right-side background from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where item's sections go; Suggestion: QItemSection"
        },
        "left": {
          "desc": "Left side content when sliding"
        },
        "right": {
          "desc": "Right side content when sliding"
        }
      },
      "events": {
        "left": {
          "desc": "Emitted when user finished sliding the item to the left",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Details",
              "definition": {
                "reset": {
                  "type": "Function",
                  "desc": "When called, it resets the component to its initial non-slided state",
                  "params": null,
                  "returns": null
                }
              }
            }
          }
        },
        "right": {
          "desc": "Emitted when user finished sliding the item to the right",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Details",
              "definition": {
                "reset": {
                  "type": "Function",
                  "desc": "When called, it resets the component to its initial non-slided state",
                  "params": null,
                  "returns": null
                }
              }
            }
          }
        },
        "action": {
          "desc": "Emitted when user finished sliding the item to either sides",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Details",
              "definition": {
                "side": {
                  "type": "String",
                  "desc": "Side to which sliding has taken effect",
                  "values": [
                    "left",
                    "right"
                  ]
                },
                "reset": {
                  "type": "Function",
                  "desc": "When called, it resets the component to its initial non-slided state",
                  "params": null,
                  "returns": null
                }
              }
            }
          }
        }
      },
      "docs": {
        "page": "slide-item",
        "route": "vue-components",
        "apiAnchor": "QSlideItem-API"
      }
    },
    "description": "The QSlideItem component is essentially a [QItem](/vue-components/list-and-list-items) with two additional slots (`left` and `right`) which allows user to drag the item (through mouse or with the finger on a touch device) to one of the sides in order to apply a specific action."
  },
  {
    "name": "QSlideTransition",
    "imports": [],
    "related": [
      "QExpansionItem"
    ],
    "group": "QSlideTransition",
    "api": {
      "type": "component",
      "props": {
        "appear": {
          "type": "Boolean",
          "desc": "If set to true, the transition will be applied on the initial render.",
          "category": "behavior"
        },
        "duration": {
          "type": "Number",
          "desc": "Duration (in milliseconds) enabling animated scroll.",
          "default": 300,
          "examples": [
            500,
            ":duration=\"500\""
          ],
          "category": "behavior"
        }
      },
      "slots": {
        "default": {
          "desc": "This is where content goes"
        }
      },
      "docs": {
        "page": "slide-transition",
        "route": "vue-components",
        "apiAnchor": "QSlideTransition-API"
      }
    },
    "description": "QSlideTransition slides the DOM element (or component) up or down, based on its visibility: works alongside `v-show` and `v-if` on a single element, similar to Vue's Transition component with the only difference being that it's not a group transition too (it only applies to one DOM element or component)."
  },
  {
    "name": "QSlider",
    "imports": [],
    "related": [
      "QRange",
      "QField"
    ],
    "group": "QSlider",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "type": "Number",
          "desc": "Model of the component (must be between min/max); Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"positionModel\""
          ],
          "category": "model"
        },
        "min": {
          "type": "Number",
          "desc": "Minimum value of the model",
          "default": 0,
          "examples": [
            ":min=\"0\""
          ],
          "category": "model"
        },
        "max": {
          "type": "Number",
          "desc": "Maximum value of the model",
          "default": 100,
          "examples": [
            ":max=\"100\""
          ],
          "category": "model"
        },
        "step": {
          "type": "Number",
          "desc": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity",
          "default": 1,
          "examples": [
            ":step=\"1\""
          ],
          "category": "model"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "label": {
          "type": "Boolean",
          "desc": "Popup a label when user clicks/taps on the slider thumb and moves it",
          "category": "content"
        },
        "label-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "label-value": {
          "type": [
            "String",
            "Number"
          ],
          "desc": "Override default label value",
          "examples": [
            ":label-value=\"model + 'px'\""
          ],
          "category": "content"
        },
        "label-always": {
          "type": "Boolean",
          "desc": "Always display the label",
          "category": "behavior|content"
        },
        "markers": {
          "type": "Boolean",
          "desc": "Display markers on the track, one for each possible value for the model",
          "category": "content"
        },
        "snap": {
          "type": "Boolean",
          "desc": "Snap on valid values, rather than sliding freely; Suggestion: use with 'step' prop",
          "category": "behavior"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        },
        "change": {
          "desc": "Emitted on lazy model value change (after user slides then releases the thumb)",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "docs": {
        "page": "slider",
        "route": "vue-components",
        "apiAnchor": "QSlider-API"
      }
    },
    "description": "The QSlider is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider.\nAlso check its “sibling”, the [QRange](/vue-components/range) component."
  },
  {
    "name": "QSpinner",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "api": {
      "type": "component",
      "docs": {
        "page": "spinners",
        "route": "vue-components",
        "apiAnchor": "QSpinner-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "size": {
          "type": "String",
          "desc": "Size in CSS units, including unit name",
          "examples": [
            "16px",
            "2rem"
          ],
          "category": "style"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "thickness": {
          "type": "Number",
          "desc": "Override value to use for stroke-width",
          "default": 5,
          "examples": [
            "2",
            "5"
          ],
          "category": "style"
        }
      }
    },
    "description": "A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations."
  },
  {
    "name": "QSplitter",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QSplitter",
    "api": {
      "type": "component",
      "docs": {
        "apiAnchor": "API",
        "page": "splitter",
        "route": "vue-components"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Number",
          "desc": "Model of the component defining the split ratio percent (0.0 < x < 100.0) between panes; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"ratio\""
          ],
          "category": "model"
        },
        "horizontal": {
          "type": "Boolean",
          "desc": "Allows the splitter to split its two panes horizontally, instead of vertically",
          "category": "content"
        },
        "limits": {
          "type": "Array",
          "desc": "An array of two values representing a ratio of minimum and maximum split area of the two panes (0.0 < x < 100.0)",
          "default": "[10, 90]",
          "examples": [
            ":limits=\"[30, 70]\""
          ],
          "category": "content|model"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "before-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the 'before' panel",
          "examples": [
            "bg-deep-orange",
            ":before-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "after-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the 'after' panel",
          "examples": [
            "bg-deep-orange",
            ":after-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "separator-class": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Class definitions to be attributed to the splitter separator",
          "examples": [
            "bg-deep-orange",
            ":separator-class=\"{ 'my-special-class': <condition> }\""
          ],
          "category": "style"
        },
        "separator-style": {
          "type": [
            "Array",
            "String",
            "Object"
          ],
          "desc": "Style definitions to be attributed to the splitter separator",
          "examples": [
            "background-color: #ff0000",
            ":separator-style=\"{ backgroundColor: '#ff0000' }\""
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Applies a default lighter color on the separator; To be used when background is darker; Avoid using when you are overriding through separator-class or separator-style props",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component; Suggestion: QTooltip, QMenu"
        },
        "before": {
          "desc": "Content of the pane on left/top"
        },
        "after": {
          "desc": "Content of the pane on right/bottom"
        },
        "separator": {
          "desc": "Content to be placed inside the separator; By default it is centered"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model value changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Number",
              "desc": "New model value (0.0 < x < 100.0) defining the ratio between panes",
              "examples": [
                0.22
              ]
            }
          }
        }
      }
    },
    "description": "The QSplitter component allow containers to be split vertically and/or horizontally through a draggable separator bar."
  },
  {
    "name": "QStep",
    "imports": [
      "QSlideTransition"
    ],
    "related": [],
    "group": "QStepper",
    "api": {
      "type": "component",
      "docs": {
        "page": "stepper",
        "route": "vue-components",
        "apiAnchor": "QStep-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "name": {
          "type": "Any",
          "desc": "Panel name",
          "required": true,
          "examples": [
            "accounts",
            "firstPanel",
            ":name=\"1\""
          ],
          "category": "general"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "title": {
          "type": "String",
          "desc": "Step title",
          "required": true,
          "examples": [
            "Ad Groups",
            "Payment"
          ],
          "category": "content"
        },
        "caption": {
          "type": "String",
          "desc": "Step’s additional information that appears beneath the title",
          "examples": [
            "Create an account",
            "Payment details"
          ],
          "category": "content"
        },
        "done-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "done-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "active-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "active-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "error-icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "error-color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "header-nav": {
          "type": "Boolean",
          "default": true,
          "desc": "Allow navigation through the header",
          "category": "behavior"
        },
        "done": {
          "type": "Boolean",
          "desc": "Mark the step as 'done'",
          "category": "state"
        },
        "error": {
          "type": "Boolean",
          "desc": "Mark the step as having an error",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "The content of the step; Can also contain a QStepperNavigation if you want to handle step navigation and don't have a global navigation in place"
        }
      }
    },
    "description": "A Stepper conveys progress through numbered steps. Steppers display progress\nthrough a sequence of logical and numbered steps. They may also be used for\nnavigation. It's usually useful when the user has to follow steps to complete a\nprocess, like in a [wizard](https://en.wikipedia.org/wiki/Wizard_(software))."
  },
  {
    "name": "QTab",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "api": {
      "type": "component",
      "docs": {
        "page": "tabs",
        "route": "vue-components",
        "apiAnchor": "QTab-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "ripple": {
          "type": [
            "Boolean",
            "Object"
          ],
          "desc": "Configure material ripple (disable it by setting it to 'false' or supply a config object)",
          "default": true,
          "examples": [
            false,
            "{ center: true, color: 'teal' }"
          ],
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "label": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "A number or string to label the tab",
          "examples": [
            "Home"
          ],
          "category": "content"
        },
        "alert": {
          "type": [
            "Boolean",
            "String"
          ],
          "desc": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color",
          "examples": [
            "alert",
            "alert=\"purple\""
          ],
          "category": "content"
        },
        "name": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Panel name",
          "default": "A random UID",
          "examples": [
            "home",
            ":name=\"1\""
          ],
          "category": "general"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Turns off capitalizing all letters within the tab (which is the default)",
          "category": "content"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "Suggestion: QMenu, QTooltip"
        }
      }
    },
    "description": "Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to [Layouts](/layout/layout) and [Header & Footer](/layout/header-and-footer#Example--Playing-with-QTabs) for references."
  },
  {
    "name": "QTabPanel",
    "imports": [],
    "related": [
      "QRouteTab",
      "QTab",
      "QTabs"
    ],
    "group": "QTabPanels",
    "api": {
      "type": "component",
      "docs": {
        "page": "tab-panels",
        "route": "vue-components",
        "apiAnchor": "QTabPanel-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "name": {
          "type": "Any",
          "desc": "Panel name",
          "required": true,
          "examples": [
            "accounts",
            "firstPanel",
            ":name=\"1\""
          ],
          "category": "general"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      }
    },
    "description": "Tab panels are a way of displaying more information using less window real estate."
  },
  {
    "name": "QTabPanels",
    "imports": [],
    "related": [
      "QRouteTab",
      "QTab",
      "QTabs"
    ],
    "group": "QTabPanels",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": "Any",
          "desc": "Model of the component defining current panel's name; If used as Number, it does not defines panel index though but slide name's which may be an Integer; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"panelName\""
          ],
          "category": "model"
        },
        "animated": {
          "type": "Boolean",
          "desc": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)",
          "category": "behavior"
        },
        "infinite": {
          "type": "Boolean",
          "desc": "Makes component appear as infinite (when reaching last panel, next one will become the first one)",
          "category": "behavior"
        },
        "swipeable": {
          "type": "Boolean",
          "desc": "Enable swipe events (may interfere with content's touch/mouse events)",
          "category": "behavior"
        },
        "transition-prev": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "slide-right"
        },
        "transition-next": {
          "type": "String",
          "desc": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)",
          "examples": [
            "fade",
            "slide-down"
          ],
          "category": "behavior",
          "default": "slide-left"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes (current panel name); Is also used by v-model",
          "params": {
            "value": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "New current panel name",
              "examples": [
                "dashboard"
              ]
            }
          }
        },
        "before-transition": {
          "desc": "Emitted before transitioning to a new panel",
          "params": {
            "newVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name towards transition is going",
              "examples": [
                "dashboard"
              ]
            },
            "oldVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name from which transition is happening",
              "examples": [
                "dashboard"
              ]
            }
          }
        },
        "transition": {
          "desc": "Emitted after component transitioned to a new panel",
          "params": {
            "newVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name towards transition has occurred",
              "examples": [
                "dashboard"
              ]
            },
            "oldVal": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel name from which transition has happened",
              "examples": [
                "dashboard"
              ]
            }
          }
        }
      },
      "methods": {
        "next": {
          "desc": "Go to next panel"
        },
        "previous": {
          "desc": "Go to previous panel"
        },
        "goTo": {
          "desc": "Go to specific panel",
          "params": {
            "panelName": {
              "type": [
                "String",
                "Number"
              ],
              "desc": "Panel's name, which may be a String or Number; Number does not refers to panel index, but to its name, which may be an Integer",
              "required": true,
              "examples": [
                "dashboard"
              ]
            }
          }
        }
      },
      "docs": {
        "page": "tab-panels",
        "route": "vue-components",
        "apiAnchor": "QTabPanels-API"
      }
    },
    "description": "Tab panels are a way of displaying more information using less window real estate."
  },
  {
    "name": "QTabs",
    "imports": [
      "QIcon",
      "QResizeObserver"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Model of the component defining current panel name; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "examples": [
            "v-model=\"selectedTab\""
          ],
          "category": "model"
        },
        "vertical": {
          "type": "Boolean",
          "desc": "Use vertical design (tabs one on top of each other rather than one next to the other horizontally)",
          "category": "content"
        },
        "align": {
          "type": "String",
          "desc": "Horizontal alignment the tabs within the tabs container",
          "default": "center",
          "values": [
            "left",
            "center",
            "right",
            "justify"
          ],
          "examples": [
            "right"
          ],
          "category": "content"
        },
        "breakpoint": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Breakpoint (in pixels) of tabs container width at which the tabs automatically turn to a justify alignment",
          "default": 600,
          "examples": [
            ":breakpoint=\"500\""
          ],
          "category": "content|behavior"
        },
        "active-color": {
          "type": "String",
          "desc": "The color to be attributed to the text of the active tab",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "active-bg-color": {
          "type": "String",
          "desc": "The color to be attributed to the background of the active tab",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "indicator-color": {
          "type": "String",
          "desc": "The color to be attributed to the indicator (the underline) of the active tab",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "left-icon": {
          "type": "String",
          "desc": "The name of an icon to replace the default arrow used to scroll through the tabs to the left, when the tabs extend past the width of the tabs container",
          "examples": [
            "arrow_left"
          ],
          "category": "content"
        },
        "right-icon": {
          "type": "String",
          "desc": "The name of an icon to replace the default arrow used to scroll through the tabs to the right, when the tabs extend past the width of the tabs container",
          "examples": [
            "arrow_right"
          ],
          "category": "content"
        },
        "shrink": {
          "type": "Boolean",
          "desc": "By default, QTabs is set to grow to the available space; However, you can reverse that with this prop; Useful (and required) when placing the component in a QToolbar",
          "category": "content"
        },
        "switch-indicator": {
          "type": "Boolean",
          "desc": "Switches the indicator position (on left of tab for vertical mode or above the tab for default horizontal mode)",
          "category": "content"
        },
        "narrow-indicator": {
          "type": "Boolean",
          "desc": "Allows the indicator to be the same width as the tab's content (text or icon), instead of the whole width of the tab",
          "category": "content"
        },
        "inline-label": {
          "type": "Boolean",
          "desc": "Allows the text to be inline with the icon, should one be used",
          "category": "content"
        },
        "no-caps": {
          "type": "Boolean",
          "desc": "Turns off capitalizing all letters within the tab (which is the default)",
          "category": "content"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "docs": {
        "page": "tabs",
        "route": "vue-components",
        "apiAnchor": "QTabs-API"
      }
    },
    "description": "Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to [Layouts](/layout/layout) and [Header & Footer](/layout/header-and-footer#Example--Playing-with-QTabs) for references."
  },
  {
    "name": "QTh",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QMarkupTable",
      "QPagination"
    ],
    "group": "QTable",
    "api": {
      "type": "component",
      "docs": {
        "page": "table",
        "route": "vue-components",
        "apiAnchor": "QTh-API"
      },
      "props": {
        "props": {
          "type": "Object",
          "desc": "QTable's header column scoped slot property",
          "examples": [
            ":props=\"props\""
          ],
          "category": "general"
        },
        "auto-width": {
          "type": "Boolean",
          "desc": "Tries to shrink header column width size; Useful for columns with a checkbox/radio/toggle",
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot in the devland unslotted content of the component"
        }
      }
    },
    "description": "QTable is a component that allows you to display data in a tabular manner. It's generally called a datatable. It packs the following main features:\n  * Filtering\n  * Sorting\n  * Single / Multiple rows selection with custom selection actions\n  * Pagination (including server-side if required)\n  * Grid mode (you can use for example QCards to display data in a non-tabular manner)\n  * Total customization of rows and cells through scoped slots\n  * Ability to add additional row(s) at top or bottom of data rows\n  * Column picker (through QTableColumns component described in one of the sections)\n  * Custom top and/or bottom Table controls\n  * Responsive design"
  },
  {
    "name": "QTime",
    "imports": [
      "QBtn",
      "TouchPan"
    ],
    "related": [
      "QDate",
      "QField"
    ],
    "group": "QDatetime",
    "api": {
      "type": "component",
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "value": {
          "desc": "Time of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": "String",
          "examples": [
            "v-model=\"currentTime\""
          ]
        },
        "landscape": {
          "type": "Boolean",
          "desc": "Display the component in landscape mode",
          "category": "behavior"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "readonly": {
          "type": "Boolean",
          "desc": "Put component in readonly mode",
          "category": "state"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "format24h": {
          "type": "Boolean",
          "desc": "Forces 24 hour time display instead of AM/PM system",
          "default": "(based on Quasar lang language being used)",
          "category": "behavior"
        },
        "options": {
          "type": "Function",
          "desc": "Optionally configure what time is the user allowed to set; Overriden by 'hour-options', 'minute-options' and 'second-options' if those are set",
          "params": {
            "hr": {
              "type": "Number",
              "desc": "Hour",
              "examples": [
                15
              ]
            },
            "min": {
              "type": "Number",
              "desc": "Minutes",
              "examples": [
                38
              ]
            },
            "sec": {
              "type": "Number",
              "desc": "Seconds",
              "examples": [
                12
              ]
            }
          },
          "returns": null,
          "examples": [
            ":options=\"(hr, min, sec) => hr <= 6\""
          ],
          "category": "behavior"
        },
        "hour-options": {
          "type": "Array",
          "desc": "Optionally configure what hours is the user allowed to set; Overrides 'options' prop if that is also set",
          "examples": [
            ":hour-options=\"[3, 6, 9]\""
          ],
          "category": "behavior"
        },
        "minute-options": {
          "type": "Array",
          "desc": "Optionally configure what minutes is the user allowed to set; Overrides 'options' prop if that is also set",
          "examples": [
            ":minute-options=\"[0, 15, 30, 45]\""
          ],
          "category": "behavior"
        },
        "second-options": {
          "type": "Array",
          "desc": "Optionally configure what seconds is the user allowed to set; Overrides 'options' prop if that is also set",
          "examples": [
            ":second-options=\"[0, 7, 10, 23]\""
          ],
          "category": "behavior"
        },
        "with-seconds": {
          "type": "Boolean",
          "desc": "Allow the time to be set with seconds",
          "category": "model|behavior"
        },
        "now-btn": {
          "type": "Boolean",
          "desc": "Display a button that selects the current time",
          "category": "content"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "String",
              "desc": "New model value",
              "required": true
            }
          },
          "type": "String"
        }
      },
      "docs": {
        "page": "time",
        "route": "vue-components",
        "apiAnchor": "QTime-API"
      }
    },
    "description": "The QTime component provides a method to input time."
  },
  {
    "name": "QTimelineEntry",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QTimeline",
    "api": {
      "type": "component",
      "docs": {
        "page": "timeline",
        "route": "vue-components",
        "apiAnchor": "QTimelineEntry-API"
      },
      "behavior": {
        "$listeners": {
          "desc": "All native events are being propagated (you don't need the '.native' modifier)"
        }
      },
      "props": {
        "heading": {
          "type": "Boolean",
          "desc": "Defines a heading timeline item",
          "category": "content"
        },
        "tag": {
          "type": "String",
          "desc": "Tag to use, if of type 'heading' only",
          "default": "h3",
          "examples": [
            "h1"
          ],
          "category": "content"
        },
        "side": {
          "type": "String",
          "desc": "Side to place the timeline entry; Works only if QTimeline layout is loose.",
          "default": "right",
          "values": [
            "left",
            "right"
          ],
          "category": "content"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "title": {
          "type": "String",
          "desc": "Title of timeline entry; Is overriden if using 'title' slot",
          "examples": [
            "December party"
          ],
          "category": "content"
        },
        "subtitle": {
          "type": "String",
          "desc": "Subtitle of timeline entry; Is overriden if using 'subtitle' slot",
          "examples": [
            "All invited"
          ],
          "category": "content"
        },
        "body": {
          "type": "String",
          "desc": "Body content of timeline entry; Use this prop or the default slot",
          "examples": [
            "Lorem ipsum dolor sit amet, consectetur adipisicing elit."
          ],
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Timeline entry content (body)"
        },
        "title": {
          "desc": "Optional slot for title; When used, it overrides 'title' prop"
        },
        "subtitle": {
          "desc": "Optional slot for subtitle; When used, it overrides 'subtitle' prop"
        }
      }
    },
    "description": "The QTimeline component displays a list of events in chronological order. It is typically a graphic design showing a long bar labelled with dates alongside itself and usually events. Timelines can use any time scale, depending on the subject and data.\nQTimeline has 3 layouts:\n- `dense` (default) is showing headings, titles, subtitles and content on the **timeline-specified side** of the time line (default on right)\n- `comfortable` is showing headings, titles and content on the **timeline-specified side** of the time line (default on right) and the subtitles on the other side\n- `loose` is showing headings on center, titles and content on the **entry-specified side** of the time line (default on right) and the subtitles on the other side"
  },
  {
    "name": "QToggle",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QCheckbox",
      "QOptionGroup",
      "QRadio",
      "QBtnToggle"
    ],
    "group": "QToggle",
    "api": {
      "type": "component",
      "props": {
        "value": {
          "desc": "Model of the component; Either use this property (along with a listener for 'input' event) OR use v-model directive",
          "category": "model",
          "type": [
            "Any",
            "Array"
          ],
          "examples": [
            "false",
            "['car', 'building']"
          ]
        },
        "val": {
          "type": "Any",
          "desc": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked",
          "examples": [
            "car"
          ],
          "category": "model"
        },
        "true-value": {
          "type": "Any",
          "desc": "What model value should be considered as checked/ticked/on?",
          "default": true,
          "examples": [
            "Agreed"
          ],
          "category": "model"
        },
        "false-value": {
          "type": "Any",
          "desc": "What model value should be considered as unchecked/unticked/off?",
          "default": false,
          "examples": [
            "Disagree"
          ],
          "category": "model"
        },
        "label": {
          "type": "String",
          "desc": "Label to display along the component (or use the default slot instead of this prop)",
          "examples": [
            "I agree with the Terms and Conditions"
          ],
          "category": "label"
        },
        "left-label": {
          "type": "Boolean",
          "desc": "Label (if any specified) should be displayed on the left side of the component",
          "category": "label"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "keep-color": {
          "type": "Boolean",
          "desc": "Should the color (if specified any) be kept when the component is unticked/ off?",
          "category": "behavior"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "dense": {
          "type": "Boolean",
          "desc": "Dense mode; occupies less space",
          "category": "style"
        },
        "disable": {
          "type": "Boolean",
          "desc": "Put component in disabled mode",
          "category": "state"
        },
        "tabindex": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Tabindex HTML attribute value",
          "examples": [
            "0",
            "100"
          ],
          "category": "general"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "checked-icon": {
          "type": "String",
          "desc": "The icon to be used when the toggle is on",
          "examples": [
            "visibility"
          ],
          "category": "content"
        },
        "unchecked-icon": {
          "type": "String",
          "desc": "The icon to be used when the toggle is off",
          "examples": [
            "visibility_off"
          ],
          "category": "content"
        }
      },
      "slots": {
        "default": {
          "desc": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string"
        }
      },
      "events": {
        "input": {
          "desc": "Emitted when component's model changes; Is also used by v-model",
          "params": {
            "value": {
              "type": "Any",
              "desc": "New model value",
              "required": true
            }
          }
        }
      },
      "methods": {
        "toggle": {
          "desc": "Toggle the state (of the model)"
        }
      },
      "docs": {
        "page": "toggle",
        "route": "vue-components",
        "apiAnchor": "QToggle-API"
      }
    },
    "description": "The QToggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off."
  },
  {
    "name": "QTree",
    "imports": [
      "QIcon",
      "QCheckbox",
      "QSlideTransition",
      "QSpinner"
    ],
    "related": [],
    "group": "QTree",
    "api": {
      "type": "component",
      "docs": {
        "apiAnchor": "API",
        "page": "tree",
        "route": "vue-components"
      },
      "props": {
        "nodes": {
          "type": "Array",
          "desc": "The array of nodes that designates the tree structure",
          "required": true,
          "examples": [
            "[ {...}, {...} ]"
          ],
          "category": "content"
        },
        "node-key": {
          "type": "String",
          "desc": "The property name of each node object that holds a unique node id",
          "required": true,
          "examples": [
            "key",
            "id"
          ],
          "category": "content"
        },
        "label-key": {
          "type": "String",
          "desc": "The property name of each node object that holds the label of the node",
          "default": "label",
          "examples": [
            "name",
            "description"
          ],
          "category": "content"
        },
        "color": {
          "type": "String",
          "desc": "Color name for component from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "control-color": {
          "type": "String",
          "desc": "Color name for controls (like checkboxes) from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "text-color": {
          "type": "String",
          "desc": "Overrides text color (if needed); color name from the Quasar Color Palette",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "selected-color": {
          "type": "String",
          "desc": "Color name for selected nodes (from the Quasar Color Palette)",
          "examples": [
            "primary",
            "teal-10"
          ],
          "category": "style"
        },
        "dark": {
          "type": "Boolean",
          "desc": "Notify the component that the background is a dark color",
          "category": "style"
        },
        "icon": {
          "type": "String",
          "desc": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix",
          "examples": [
            "map",
            "ion-add",
            "img:https://cdn.quasar-framework.org/logo/svg/quasar-logo.svg",
            "img:statics/path/to/some_image.png"
          ],
          "category": "content"
        },
        "tick-strategy": {
          "type": "String",
          "desc": "The type of strategy to use for the selection of the nodes",
          "default": "none",
          "values": [
            "none",
            "strict",
            "leaf",
            "leaf-filtered"
          ],
          "category": "behavior"
        },
        "ticked": {
          "type": "Array",
          "desc": "Keys of nodes that are ticked",
          "sync": true,
          "examples": [
            ":ticked.sync=\"tickedKeys\""
          ],
          "category": "state"
        },
        "expanded": {
          "type": "Array",
          "desc": "Keys of nodes that are expanded",
          "sync": true,
          "examples": [
            ":expanded.sync=\"expandedKeys\""
          ],
          "category": "state"
        },
        "selected": {
          "type": "Any",
          "desc": "Key of node currently selected",
          "sync": true,
          "examples": [
            ":selected.sync=\"selectedKey\""
          ],
          "category": "state"
        },
        "default-expand-all": {
          "type": "Boolean",
          "desc": "Allow the tree to have all its branches expanded, when first rendered",
          "category": "behavior"
        },
        "accordion": {
          "type": "Boolean",
          "desc": "Allows the tree to be set in accordion mode",
          "category": "behavior"
        },
        "filter": {
          "type": "String",
          "desc": "The text value to be used for filtering nodes",
          "examples": [
            ":filter=\"searchText\""
          ],
          "category": "filter"
        },
        "filter-method": {
          "type": "Function",
          "desc": "The function to use to filter the tree nodes",
          "default": "(see source code)",
          "params": {
            "node": {
              "type": "Object",
              "desc": "Node currently being filtered"
            },
            "filter": {
              "type": "String",
              "desc": "Filter text to match against"
            }
          },
          "returns": {
            "type": "Boolean",
            "desc": "Matches or not"
          },
          "category": "filter"
        },
        "duration": {
          "type": "Number",
          "desc": "Toggle animation duration (in milliseconds)",
          "default": 300,
          "examples": [
            ":duration=\"500\""
          ],
          "category": "style"
        },
        "no-nodes-label": {
          "type": "String",
          "desc": "Override default such label for when no nodes are available",
          "examples": [
            "No nodes to show!"
          ],
          "category": "content"
        },
        "no-results-label": {
          "type": "String",
          "desc": "Override default such label for when no nodes are available due to filtering",
          "examples": [
            "No results"
          ],
          "category": "content"
        }
      },
      "scopedSlots": {
        "default-header": {
          "desc": "Slot to use for defining the header of a node",
          "scope": {
            "expanded": {
              "type": "Boolean",
              "desc": "Is node expanded? Can directly be assigned new Boolean value which changes expanded state",
              "reactive": true
            },
            "ticked": {
              "type": "Boolean",
              "desc": "Is node ticked? Can directly be assigned new Boolean value which changes ticked state",
              "reactive": true
            },
            "tree": {
              "type": "Object",
              "desc": "QTree instance"
            },
            "node": {
              "type": "Object",
              "desc": "Node object"
            },
            "key": {
              "type": "Any",
              "desc": "Node's key"
            },
            "color": {
              "type": "String",
              "desc": "QTree instance 'color' supplied prop value",
              "examples": [
                "primary"
              ]
            },
            "dark": {
              "type": "Boolean",
              "desc": "QTree instance 'dark' supplied prop value"
            }
          }
        },
        "header-[name]": {
          "desc": "Header template slot for describing node header; Used by nodes which have their 'header' prop set to '[name]', where '[name]' can be any string",
          "scope": {
            "expanded": {
              "type": "Boolean",
              "desc": "Is node expanded? Can directly be assigned new Boolean value which changes expanded state",
              "reactive": true
            },
            "ticked": {
              "type": "Boolean",
              "desc": "Is node ticked? Can directly be assigned new Boolean value which changes ticked state",
              "reactive": true
            },
            "tree": {
              "type": "Object",
              "desc": "QTree instance"
            },
            "node": {
              "type": "Object",
              "desc": "Node object"
            },
            "key": {
              "type": "Any",
              "desc": "Node's key"
            },
            "color": {
              "type": "String",
              "desc": "QTree instance 'color' supplied prop value",
              "examples": [
                "primary"
              ]
            },
            "dark": {
              "type": "Boolean",
              "desc": "QTree instance 'dark' supplied prop value"
            }
          }
        },
        "default-body": {
          "desc": "Slot to use for defining the body of a node",
          "scope": {
            "expanded": {
              "type": "Boolean",
              "desc": "Is node expanded? Can directly be assigned new Boolean value which changes expanded state",
              "reactive": true
            },
            "ticked": {
              "type": "Boolean",
              "desc": "Is node ticked? Can directly be assigned new Boolean value which changes ticked state",
              "reactive": true
            },
            "tree": {
              "type": "Object",
              "desc": "QTree instance"
            },
            "node": {
              "type": "Object",
              "desc": "Node object"
            },
            "key": {
              "type": "Any",
              "desc": "Node's key"
            },
            "color": {
              "type": "String",
              "desc": "QTree instance 'color' supplied prop value",
              "examples": [
                "primary"
              ]
            },
            "dark": {
              "type": "Boolean",
              "desc": "QTree instance 'dark' supplied prop value"
            }
          }
        },
        "body-[name]": {
          "desc": "Body template slot for describing node body; Used by nodes which have their 'body' prop set to '[name]', where '[name]' can be any string",
          "scope": {
            "expanded": {
              "type": "Boolean",
              "desc": "Is node expanded? Can directly be assigned new Boolean value which changes expanded state",
              "reactive": true
            },
            "ticked": {
              "type": "Boolean",
              "desc": "Is node ticked? Can directly be assigned new Boolean value which changes ticked state",
              "reactive": true
            },
            "tree": {
              "type": "Object",
              "desc": "QTree instance"
            },
            "node": {
              "type": "Object",
              "desc": "Node object"
            },
            "key": {
              "type": "Any",
              "desc": "Node's key"
            },
            "color": {
              "type": "String",
              "desc": "QTree instance 'color' supplied prop value",
              "examples": [
                "primary"
              ]
            },
            "dark": {
              "type": "Boolean",
              "desc": "QTree instance 'dark' supplied prop value"
            }
          }
        }
      },
      "events": {
        "update:expanded": {
          "desc": "Triggered when nodes are expanded or collapsed; Used by Vue on 'update' synched prop",
          "params": {
            "expanded": {
              "type": "Array",
              "desc": "The expanded node keys",
              "examples": [
                "[ 'Node 1', 'Node 2' ]"
              ]
            }
          }
        },
        "lazy-load": {
          "desc": "Emitted when the lazy loading of nodes is finished",
          "params": {
            "details": {
              "type": "Object",
              "desc": "Lazy loading details",
              "definition": {
                "node": {
                  "type": "Object",
                  "desc": "The node to which the new nodes (the children) will be appended"
                },
                "key": {
                  "type": "String",
                  "desc": "The key of the node getting the newly loaded child nodes",
                  "examples": [
                    "New Node"
                  ]
                },
                "done": {
                  "type": "Function",
                  "desc": "The callback to be carried out when the loading is successful",
                  "params": {
                    "children": {
                      "type": "Array",
                      "desc": "Array of nodes"
                    }
                  },
                  "returns": null
                },
                "fail": {
                  "type": "Function",
                  "desc": "The callback to be carried out should the loading fails",
                  "params": null,
                  "returns": null
                }
              }
            }
          }
        },
        "update:ticked": {
          "desc": "Emitted when nodes are ticked/unticked via the checkbox; Used by Vue on 'ticked' synched prop",
          "params": {
            "target": {
              "type": "Array",
              "desc": "The ticked node keys",
              "examples": [
                "[ 'Node 1', 'Node 2' ]"
              ]
            }
          }
        },
        "update:selected": {
          "desc": "Emitted when selected node changes; Used by Vue on 'selected' synched prop",
          "params": {
            "target": {
              "type": "Any",
              "desc": "The selected node key",
              "examples": [
                "Node 1"
              ]
            }
          }
        }
      },
      "methods": {
        "getNodeByKey": {
          "desc": "Get the node with the given key",
          "params": {
            "key": {
              "type": "Any",
              "desc": "The key of a node",
              "required": true,
              "examples": [
                "Node 1"
              ]
            }
          },
          "returns": {
            "type": "Object",
            "desc": "Requested node"
          }
        },
        "getTickedNodes": {
          "desc": "Get array of nodes that are ticked",
          "returns": {
            "type": "Array",
            "desc": "Ticked node objects"
          }
        },
        "getExpandedNodes": {
          "desc": "Get array of nodes that are expanded",
          "returns": {
            "type": "Array",
            "desc": "Expanded node objects"
          }
        },
        "isExpanded": {
          "desc": "Determine if a node is expanded",
          "params": {
            "key": {
              "type": "Any",
              "desc": "The key of a node",
              "required": true,
              "examples": [
                "Node 1"
              ]
            }
          },
          "returns": {
            "type": "Boolean",
            "desc": "Is specified node expanded?"
          }
        },
        "expandAll": {
          "desc": "Use to expand all branches of the tree"
        },
        "collapseAll": {
          "desc": "Use to collapse all branches of the tree"
        },
        "setExpanded": {
          "desc": "Expands the tree at the point of the node with the key given",
          "params": {
            "key": {
              "type": "Any",
              "desc": "The key of a node",
              "required": true,
              "examples": [
                "Node 1"
              ]
            },
            "state": {
              "type": "Boolean",
              "desc": "Set to 'true' to expand the branch of the tree, otherwise 'false' collapses it",
              "required": true
            }
          }
        },
        "isTicked": {
          "desc": "Method to check if a node's checkbox is selected or not",
          "params": {
            "key": {
              "type": "Any",
              "desc": "The key of a node",
              "required": true,
              "examples": [
                "Node 1"
              ]
            }
          },
          "returns": {
            "type": "Boolean",
            "desc": "Is specified node ticked?"
          }
        },
        "setTicked": {
          "desc": "Method to set a node's checkbox programmatically",
          "params": {
            "keys": {
              "type": "Array",
              "desc": "The keys of nodes to tick/untick",
              "required": true,
              "examples": [
                "[ 'Node 1', 'Node 2' ]"
              ]
            },
            "state": {
              "type": "Boolean",
              "desc": "Set to 'true' to tick the checkbox of nodes, otherwise 'false' unticks them",
              "required": true
            }
          }
        }
      }
    },
    "description": "Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure."
  },
  {
    "name": "TouchPan",
    "imports": [],
    "related": [
      "TouchSwipe",
      "TouchHold"
    ],
    "api": {
      "type": "directive",
      "value": {
        "type": "Function",
        "desc": "Handler for panning",
        "params": {
          "details": {
            "type": "Object",
            "desc": "Touch details",
            "definition": {
              "evt": {
                "type": "Object",
                "desc": "Original JS event Object"
              },
              "position": {
                "type": "Object",
                "desc": "Event Position Object",
                "definition": {
                  "top": {
                    "type": "Number",
                    "desc": "Vertical offset from top of window",
                    "examples": [
                      235
                    ]
                  },
                  "left": {
                    "type": "Number",
                    "desc": "Horizontal offset from left of window",
                    "examples": [
                      235
                    ]
                  }
                }
              },
              "direction": {
                "type": "String",
                "desc": "Direction of movement",
                "values": [
                  "up",
                  "right",
                  "down",
                  "left"
                ]
              },
              "isFirst": {
                "type": "Boolean",
                "desc": "Is first time the handler is called since movement started"
              },
              "isFinal": {
                "type": "Boolean",
                "desc": "Is last time the handler is called since movement ended"
              },
              "isMouse": {
                "type": "Boolean",
                "desc": "Is it a mouse generated event?"
              },
              "duration": {
                "type": "Number",
                "desc": "How long it took to trigger the event (in milliseconds)",
                "examples": [
                  612
                ]
              },
              "distance": {
                "type": "Object",
                "desc": "Absolute distance (in pixels) since movement started from initial point",
                "definition": {
                  "x": {
                    "type": "Number",
                    "desc": "Absolute distance horizontally",
                    "examples": [
                      231
                    ]
                  },
                  "y": {
                    "type": "Number",
                    "desc": "Absolute distance vertically",
                    "examples": [
                      231
                    ]
                  }
                }
              },
              "offset": {
                "type": "Object",
                "desc": "Distance (in pixels) since movement started from initial point",
                "definition": {
                  "x": {
                    "type": "Number",
                    "desc": "Distance horizontally",
                    "examples": [
                      -231,
                      110
                    ]
                  },
                  "y": {
                    "type": "Number",
                    "desc": "Distance vertically",
                    "examples": [
                      -231,
                      110
                    ]
                  }
                }
              },
              "delta": {
                "type": "Object",
                "desc": "Delta of distance (in pixels) since handler was called last time",
                "definition": {
                  "x": {
                    "type": "Number",
                    "desc": "Distance horizontally",
                    "examples": [
                      2
                    ]
                  },
                  "y": {
                    "type": "Number",
                    "desc": "Distance vertically",
                    "examples": [
                      1
                    ]
                  }
                }
              }
            }
          }
        },
        "returns": null,
        "examples": [
          "v-touch-pan=\"fnToCall\""
        ]
      },
      "modifiers": {
        "stop": {
          "type": "Boolean",
          "desc": "Stop event propagation"
        },
        "prevent": {
          "type": "Boolean",
          "desc": "Calls event.preventDefault()"
        },
        "mightPrevent": {
          "type": "Boolean",
          "desc": "Required when you might call event.stopPropagation() in your handler"
        },
        "mouse": {
          "type": "Boolean",
          "desc": "Listen for mouse events too"
        },
        "mouseStop": {
          "type": "Boolean",
          "desc": "If listening for mouse events too: stop mouse event propagation"
        },
        "mousePrevent": {
          "type": "Boolean",
          "desc": "If listening for mouse events too: calls event.preventDefault() on the mouse events"
        },
        "mouseMightPrevent": {
          "type": "Boolean",
          "desc": "If listening for mouse events too: required when you might call event.stopPropagation() in your handler"
        },
        "horizontal": {
          "type": "Boolean",
          "desc": "Catch horizontal movement; If 'horizontal' or 'vertical' are not specified, then both directions are considered by default"
        },
        "vertical": {
          "type": "Boolean",
          "desc": "Catch vertical movement; If 'horizontal' or 'vertical' are not specified, then both directions are considered by default"
        }
      },
      "docs": {
        "page": "touch-pan",
        "route": "vue-directives",
        "apiAnchor": "API"
      }
    },
    "description": "Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: `v-touch-pan`, `v-touch-swipe`, `v-touch-hold` and even `v-touch-repeat`.\n> **These directives also work with mouse events, not only touch events**, so you are able to build cool functionality for your App on desktops too.\nWe will be describing `v-touch-pan` on the lines below."
  }
]