[
  {
    "name": "BottomSheet",
    "imports": [
      "QDialog",
      "QIcon",
      "QSeparator",
      "QCard",
      "QCardSection",
      "QItem",
      "QItemSection"
    ],
    "related": [
      "Dialog",
      "QDialog"
    ],
    "group": "QDialogBottomSheet",
    "description": "<p>Bottom Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Bottom Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.\nThe Bottom Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Bottom Sheet options.\nBottom Sheets can be displayed as a list or as a grid, with icons or with avatars. They can be used either as a component in your Vue file templates, or as a globally available method.</p>\n"
  },
  {
    "name": "ClosePopup",
    "imports": [],
    "related": [
      "QDialog",
      "QMenu"
    ],
    "description": "<p>This directive is a helper when dealing with <doc-link to=\"/vue-components/dialog\">QDialog</doc-link> and <doc-link to=\"/vue-components/menu\">QMenu</doc-link> components. When attached to a DOM element or component then that component will close the QDialog or QMenu (whichever is first parent) when clicked/tapped.</p>\n"
  },
  {
    "name": "Dialog",
    "imports": [],
    "related": [
      "QDialog",
      "BottomSheet"
    ],
    "description": "<p>Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).\nFrom a UI perspective, you can think of Dialogs as a type of floating modal, which covers only a portion of the screen. This means Dialogs should only be used for quick user actions only.</p>\n"
  },
  {
    "name": "Loading",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "LoadingBar",
      "QAjaxBar"
    ],
    "description": "<p>Loading is a feature that you can use to display an overlay with a spinner on top of your App’s content to inform the user that a background operation is taking place. No need to add complex logic within your Pages for global background operations.</p>\n"
  },
  {
    "name": "LoadingBar",
    "imports": [],
    "related": [
      "QAjaxBar",
      "QLinearProgress"
    ],
    "description": "<p>The Quasar LoadingBar plugin offers an easy way to set up your app with a <doc-link to=\"/vue-components/ajax-bar\">QAjaxBar</doc-link> in case you don’t want to handle a QAjaxBar component yourself.\nFor a demo, please visit the QAjaxBar documentation page.</p>\n"
  },
  {
    "name": "QAjaxBar",
    "imports": [],
    "related": [
      "Loading",
      "LoadingBar"
    ],
    "group": "QAjaxBar",
    "description": "<p>In most mobile apps and even some desktop apps, you will most likely have some API communication to a server via an <doc-link to=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">Ajax call</doc-link>. Since these calls can take more than a second or two, it is good UX to offer the user feedback, when such an API call is being made. Which is where QAjaxBar comes into helping you out.\nQAjaxBar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well.</p>\n"
  },
  {
    "name": "QAvatar",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QAvatar",
    "description": "<p>The QAvatar component creates a scalable, color-able element that can have text, icon or image within its shape. By default it is circular, but it can also be square or have a border-radius applied to give rounded corners to the square shape.\nIt is often used with other components in their slots.</p>\n"
  },
  {
    "name": "QBadge",
    "imports": [],
    "related": [],
    "group": "QBadge",
    "description": "<p>The QBadge component allows you to create a small badge for adding information like contextual data that needs to stand out and get noticed. It is also often useful in combination with other elements like a user avatar to show a number of new messages.</p>\n"
  },
  {
    "name": "QBar",
    "imports": [],
    "related": [],
    "group": "QBar",
    "description": "<p>The QBar is a small component for creating the top bar on different types of mobile or desktop websites/apps. For instance, in desktop apps QBar will have things like the close, minimize or maximize buttons and other menu controls for your application.\nQBar is especially useful for frame-less Electron apps where you integrate it in the QHeader.</p>\n"
  },
  {
    "name": "QBreadcrumbs",
    "imports": [],
    "related": [],
    "group": "QBreadcrumbs",
    "description": "<p>The QBreadcrumbs component is used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites. Most common use is it’s in a <doc-link to=\"/vue-components/toolbar\">QToolbar</doc-link>, but it’s not limited to it.</p>\n"
  },
  {
    "name": "QBreadcrumbsEl",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QBreadcrumbs",
    "description": "<p>The QBreadcrumbs component is used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites. Most common use is it’s in a <doc-link to=\"/vue-components/toolbar\">QToolbar</doc-link>, but it’s not limited to it.</p>\n"
  },
  {
    "name": "QBtn",
    "imports": [
      "QIcon",
      "QSpinner"
    ],
    "related": [
      "QBtnGroup",
      "QBtnDropdown",
      "QBtnToggle"
    ],
    "group": "QBtn",
    "description": "<p>Quasar has a component called QBtn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).\nThe button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.\nWhen not disabled or spinning, QBtn emits a <code class=\"doc-token\">@click</code> event, as soon as it is clicked or tapped.</p>\n"
  },
  {
    "name": "QBtnDropdown",
    "imports": [
      "QIcon",
      "QBtn",
      "QBtnGroup",
      "QMenu"
    ],
    "related": [
      "QBtn",
      "QBtnGroup"
    ],
    "group": "QBtn",
    "description": "<p>QBtnDropdown is a very convenient dropdown button. Goes very well with <doc-link to=\"/vue-components/lists-and-list-items\">QList</doc-link> as dropdown content, but it’s by no means limited to it.\nIn case you are looking for a dropdown “input” instead of “button” use <doc-link to=\"/vue-components/select\">Select</doc-link> instead.</p>\n"
  },
  {
    "name": "QBtnGroup",
    "imports": [],
    "related": [
      "QBtn",
      "QBtnDropdown",
      "QBtnToggle"
    ],
    "group": "QBtn",
    "description": "<p>You can conveniently group <doc-link to=\"/vue-components/button\">QBtn</doc-link> and <doc-link to=\"/vue-components/button-dropdown\">QBtnDropdown</doc-link> using QBtnGroup. Be sure to check those component’s respective pages to see their props and methods.</p>\n"
  },
  {
    "name": "QBtnToggle",
    "imports": [
      "QBtn",
      "QBtnGroup"
    ],
    "related": [
      "QBtn",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QOptionGroup",
      "QRadio",
      "QCheckbox",
      "QToggle"
    ],
    "group": "QBtn",
    "description": "<p>The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices.</p>\n"
  },
  {
    "name": "QCard",
    "imports": [],
    "related": [
      "QSeparator"
    ],
    "group": "QCard",
    "description": "<p>The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations.\nWith so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.\nThe QCard component is intentionally lightweight and essentially a containing element that is capable of “hosting” any other component that is appropriate.</p>\n"
  },
  {
    "name": "QCardActions",
    "imports": [],
    "related": [
      "QSeparator"
    ],
    "group": "QCard",
    "description": "<p>The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations.\nWith so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.\nThe QCard component is intentionally lightweight and essentially a containing element that is capable of “hosting” any other component that is appropriate.</p>\n"
  },
  {
    "name": "QCardSection",
    "imports": [],
    "related": [
      "QSeparator"
    ],
    "group": "QCard",
    "description": "<p>The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations.\nWith so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.\nThe QCard component is intentionally lightweight and essentially a containing element that is capable of “hosting” any other component that is appropriate.</p>\n"
  },
  {
    "name": "QCarousel",
    "imports": [
      "QBtn"
    ],
    "related": [],
    "group": "QCarousel",
    "description": "<p>The QCarousel component allows you to display more information with less real estate, using slides. Useful for creating Wizards or an image gallery too.</p>\n"
  },
  {
    "name": "QCheckbox",
    "imports": [],
    "related": [
      "QToggle",
      "QOptionGroup",
      "QRadio",
      "QBtnToggle"
    ],
    "group": "QCheckbox",
    "description": "<p>The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.</p>\n"
  },
  {
    "name": "QChip",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QAvatar",
      "QIcon",
      "QBadge"
    ],
    "group": "QChip",
    "description": "<p>The QChip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way.\nChips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so.</p>\n"
  },
  {
    "name": "QCircularProgress",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QInnerLoading",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "Loading",
      "LoadingBar"
    ],
    "group": "QCircularProgress",
    "description": "<p>The QCircularProgress component displays a colored circular progress. The bar can either have a determinate progress, or an indeterminate animation. It should be used to inform the user that an action is occurring in the background.</p>\n"
  },
  {
    "name": "QColor",
    "imports": [
      "TouchPan",
      "QSlider",
      "QIcon",
      "QTabs",
      "QTab",
      "QTabPanels",
      "QTabPanel"
    ],
    "related": [],
    "group": "QColor",
    "description": "<p>The QColor component provides a method to input colors.</p>\n"
  },
  {
    "name": "QDate",
    "imports": [
      "QBtn"
    ],
    "related": [
      "QTime",
      "QField"
    ],
    "group": "QDatetime",
    "description": "<p>The QDate component provides a method to input date. Currently it supports Gregorian (default) and Persian calendars.</p>\n"
  },
  {
    "name": "QDialog",
    "imports": [],
    "related": [
      "Dialog",
      "ClosePopup",
      "QCard",
      "QCardActions",
      "QCardSection",
      "QPopupProxy"
    ],
    "group": "QDialog",
    "description": "<p>The QDialog component is a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).\nFrom a UI perspective, you can think of Dialogs as a type of floating modal, which covers only a portion of the screen. This means Dialogs should only be used for quick user actions, like verifying a password, getting a short App notification or selecting an option or options quickly.</p>\n"
  },
  {
    "name": "QDrawer",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QLayout",
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList"
    ],
    "group": "QLayout",
    "description": "<p>QLayout allows you to configure your views as a 3x3 matrix, containing optional left-side and/or right-side Drawers. If you haven’t already, please read <doc-link to=\"/layout/layout\">QLayout</doc-link> documentation page first.\nQDrawer is the sidebar part of your QLayout.</p>\n"
  },
  {
    "name": "QExpansionItem",
    "imports": [
      "QItem",
      "QItemSection",
      "QItemLabel",
      "QIcon",
      "QSlideTransition",
      "QSeparator"
    ],
    "related": [
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList",
      "QSlideItem",
      "QSlideTransition"
    ],
    "group": "QList",
    "description": "<p>The QExpansionItem component allows the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.\nThey are basically <doc-link to=\"/vue-components/list-and-list-items\">QItem</doc-link> components wrapped with additional functionality. So they can be included in QLists and inherit QItem component properties.</p>\n"
  },
  {
    "name": "QFab",
    "imports": [
      "QBtn",
      "QIcon"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QFab",
    "description": "<p>A Floating Action Button (FAB) represents the primary action in a Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.\nNote that you don’t need a QLayout to use FABs.</p>\n"
  },
  {
    "name": "QFabAction",
    "imports": [
      "QBtn"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QFab",
    "description": "<p>A Floating Action Button (FAB) represents the primary action in a Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.\nNote that you don’t need a QLayout to use FABs.</p>\n"
  },
  {
    "name": "QField",
    "imports": [
      "QIcon",
      "QSpinner"
    ],
    "related": [],
    "group": "QField",
    "description": "<p>The QField component is used to provide common functionality and aspect to form components. It uses <code class=\"doc-token\">:value</code> (or <code class=\"doc-token\">v-model</code> if you want to use <code class=\"doc-token\">clearable</code> property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors.\nQField allows you to display any form control (or almost anything as a matter of fact) inside it. Just place your desired content inside the <code class=\"doc-token\">control</code> slot.</p>\n"
  },
  {
    "name": "QFooter",
    "imports": [
      "QResizeObserver"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer",
      "QToolbar",
      "QToolbarTitle",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QBar"
    ],
    "group": "QLayout",
    "description": "<p>QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer (mostly used for navbar, but can be anything). If you haven’t already, please read <doc-link to=\"/layout/layout\">QLayout</doc-link> documentation page first.</p>\n"
  },
  {
    "name": "QForm",
    "imports": [],
    "related": [
      "QInput",
      "QSelect",
      "QField"
    ],
    "group": "QForm",
    "description": "<p>The QForm component renders a <code class=\"doc-token\">&lt;form&gt;</code> DOM element and allows you to easily validate child form components (like <doc-link to=\"/vue-components/input#Internal-validation\">QInput</doc-link>, <doc-link to=\"/vue-components/select\">QSelect</doc-link> or your <doc-link to=\"/vue-components/field\">QField</doc-link> wrapped components) that have the <strong>internal validation</strong> (NOT the external one) through <code class=\"doc-token\">rules</code> associated with them.</p>\n"
  },
  {
    "name": "QHeader",
    "imports": [
      "QResizeObserver"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer",
      "QToolbar",
      "QToolbarTitle",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QRouteTab",
      "QTab",
      "QTabs",
      "QBar"
    ],
    "group": "QLayout",
    "description": "<p>QLayout allows you to configure your views as a 3x3 matrix, containing an optional Header and/or Footer (mostly used for navbar, but can be anything). If you haven’t already, please read <doc-link to=\"/layout/layout\">QLayout</doc-link> documentation page first.</p>\n"
  },
  {
    "name": "QIcon",
    "imports": [],
    "related": [],
    "group": "QIcon",
    "description": "<p>The QIcon component allows you to easily insert icons within other components or any other area of your pages.\nQuasar currently supports: <doc-link to=\"https://material.io/icons/\">Material Icons</doc-link> , <doc-link to=\"http://fontawesome.io/icons/\">Font Awesome</doc-link>, <doc-link to=\"http://ionicons.com/\">Ionicons</doc-link>, <doc-link to=\"https://materialdesignicons.com/\">MDI</doc-link>, <doc-link to=\"https://akveo.github.io/eva-icons\">Eva Icons</doc-link> and <doc-link to=\"https://themify.me/themify-icons\">Themify Icons</doc-link>.</p>\n"
  },
  {
    "name": "QImg",
    "imports": [
      "QSpinner"
    ],
    "related": [
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail"
    ],
    "group": "QImg",
    "description": "<p>The QImg component makes working with images easy and also adds a nice loading effect to it along with many other features (example: the ability to set an aspect ratio).</p>\n"
  },
  {
    "name": "QInfiniteScroll",
    "imports": [],
    "related": [
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "QPullToRefresh"
    ],
    "group": "QInfiniteScroll",
    "description": "<p>The QInfiteScroll component allows you to load new content as the user scrolls down the page.</p>\n"
  },
  {
    "name": "QInnerLoading",
    "imports": [
      "QSpinner"
    ],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "Loading",
      "LoadingBar"
    ],
    "group": "QInnerLoading",
    "description": "<p>The QInnerLoading component allows you to add a progress animation within a component. Much like the <doc-link to=\"/vue-components/loading\">Loading Plugin</doc-link>, it’s purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time. QInnerLoading will add an opaque overlay over the delayed element along with a <doc-link to=\"/vue-components/spinners\">Spinner</doc-link>.</p>\n"
  },
  {
    "name": "QInput",
    "imports": [
      "QField"
    ],
    "related": [],
    "group": "QInput",
    "description": "<p>The QInput component is used to capture text input from the user. It uses <code class=\"doc-token\">v-model</code>, similar to a regular input. It has support for errors and validation, and comes in a variety of styles, colors, and types.</p>\n"
  },
  {
    "name": "QItem",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "description": "<p>The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example <doc-link to=\"/vue-components/expansion-item\">QExpansionItem</doc-link> or <doc-link to=\"/vue-components/slide-item\">QSlideItem</doc-link>. Also <doc-link to=\"/vue-components/separator\">QSeparator</doc-link> can be used to split up sections, where needed.\nList Items have the following pre-built child components:</p>\n<ul>\n<li><strong>QItemSection</strong> - An item section can have several uses for particular content. They are controlled via the <code class=\"doc-token\">avatar</code>, <code class=\"doc-token\">thumbnail</code> and <code class=\"doc-token\">side</code> props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).</li>\n<li><strong>QItemLabel</strong> - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.</li>\n</ul>\n"
  },
  {
    "name": "QItemLabel",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "description": "<p>The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example <doc-link to=\"/vue-components/expansion-item\">QExpansionItem</doc-link> or <doc-link to=\"/vue-components/slide-item\">QSlideItem</doc-link>. Also <doc-link to=\"/vue-components/separator\">QSeparator</doc-link> can be used to split up sections, where needed.\nList Items have the following pre-built child components:</p>\n<ul>\n<li><strong>QItemSection</strong> - An item section can have several uses for particular content. They are controlled via the <code class=\"doc-token\">avatar</code>, <code class=\"doc-token\">thumbnail</code> and <code class=\"doc-token\">side</code> props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).</li>\n<li><strong>QItemLabel</strong> - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.</li>\n</ul>\n"
  },
  {
    "name": "QItemSection",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "description": "<p>The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example <doc-link to=\"/vue-components/expansion-item\">QExpansionItem</doc-link> or <doc-link to=\"/vue-components/slide-item\">QSlideItem</doc-link>. Also <doc-link to=\"/vue-components/separator\">QSeparator</doc-link> can be used to split up sections, where needed.\nList Items have the following pre-built child components:</p>\n<ul>\n<li><strong>QItemSection</strong> - An item section can have several uses for particular content. They are controlled via the <code class=\"doc-token\">avatar</code>, <code class=\"doc-token\">thumbnail</code> and <code class=\"doc-token\">side</code> props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).</li>\n<li><strong>QItemLabel</strong> - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.</li>\n</ul>\n"
  },
  {
    "name": "QKnob",
    "imports": [
      "QCircularProgress",
      "TouchPan"
    ],
    "related": [
      "QCircularProgress"
    ],
    "group": "QKnob",
    "description": "<p>The QKnob component is used to take a number input from the user through mouse/touch panning. It is based on <doc-link to=\"/vue-components/circular-progress\">QCircularProgress</doc-link> and inherits all its properties and behavior.</p>\n"
  },
  {
    "name": "QLayout",
    "imports": [
      "QScrollObserver",
      "QResizeObserver"
    ],
    "related": [
      "QFooter",
      "QHeader",
      "QDrawer",
      "QPage",
      "QPageContainer",
      "QPageSticky",
      "QPageScroller",
      "QFab",
      "QFabAction"
    ],
    "group": "QLayout",
    "description": "<p>The QLayout is a component designed to manage the entire window and wrap page content with elements such as a navigational bar or a drawer. Multiple pages can share the same QLayout, so the code is reusable, which is one of their key points.\n<strong>QLayout is NOT mandatory</strong>, but it does help you to better structure your website/app. It has a number of features which offer you major benefits in simplifying your website/app’s layout design, right out of the box.</p>\n"
  },
  {
    "name": "QLinearProgress",
    "imports": [],
    "related": [
      "QCircularProgress",
      "QInnerLoading",
      "QSpinner",
      "QSpinnerAudio",
      "QSpinnerBall",
      "QSpinnerBars",
      "QSpinnerComment",
      "QSpinnerCube",
      "QSpinnerDots",
      "QSpinnerFacebook",
      "QSpinnerGears",
      "QSpinnerGrid",
      "QSpinnerHearts",
      "QSpinnerHourglass",
      "QSpinnerInfinity",
      "QSpinnerIos",
      "QSpinnerOval",
      "QSpinnerPie",
      "QSpinnerPuff",
      "QSpinnerRadio",
      "QSpinnerRings",
      "QSpinnerTail",
      "Loading",
      "LoadingBar"
    ],
    "group": "QLinearProgress",
    "description": "<p>The QLinearProgress component displays a colored loading bar. The bar can either have a determinate progress, or an indeterminate animation. It should be used to inform the user that an action is occurring in the background.</p>\n"
  },
  {
    "name": "QList",
    "imports": [],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QList",
    "description": "<p>The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.\nLists can encapsulate Items or Item-like components, for example <doc-link to=\"/vue-components/expansion-item\">QExpansionItem</doc-link> or <doc-link to=\"/vue-components/slide-item\">QSlideItem</doc-link>. Also <doc-link to=\"/vue-components/separator\">QSeparator</doc-link> can be used to split up sections, where needed.\nList Items have the following pre-built child components:</p>\n<ul>\n<li><strong>QItemSection</strong> - An item section can have several uses for particular content. They are controlled via the <code class=\"doc-token\">avatar</code>, <code class=\"doc-token\">thumbnail</code> and <code class=\"doc-token\">side</code> props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).</li>\n<li><strong>QItemLabel</strong> - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.</li>\n</ul>\n"
  },
  {
    "name": "QMarkupTable",
    "imports": [],
    "related": [
      "QTable",
      "QTd",
      "QTh",
      "QTr"
    ],
    "group": "QTable",
    "description": "<p>The QMarkupTable is a way for you to simply wrap a native <code class=\"doc-token\">&lt;table&gt;</code> in order to make it look like a Material Design table.</p>\n"
  },
  {
    "name": "QMenu",
    "imports": [],
    "related": [
      "ClosePopup",
      "QPopupProxy"
    ],
    "group": "QMenu",
    "description": "<p>The QMenu component is a convenient way to show menus. Goes very well with <doc-link to=\"/vue-components/list-and-list-items\">QList</doc-link> as dropdown content, but it’s by no means limited to it.</p>\n"
  },
  {
    "name": "QOptionGroup",
    "imports": [
      "QRadio",
      "QCheckbox",
      "QToggle"
    ],
    "related": [
      "QRadio",
      "QCheckbox",
      "QToggle",
      "QBtnToggle"
    ],
    "group": "QOptionGroup",
    "description": "<p>The QOptionGroup component is a helper component that allows you better control for grouping binary (on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good use for this component is for offering a set of options or settings to turn on and off.</p>\n"
  },
  {
    "name": "QPage",
    "imports": [],
    "related": [
      "QLayout"
    ],
    "group": "QLayout",
    "description": "<p>We will be talking about encapsulating pages within a QLayout. If you haven’t already, please read <doc-link to=\"/layout/layout\">QLayout</doc-link> documentation page first.</p>\n"
  },
  {
    "name": "QPageContainer",
    "imports": [],
    "related": [
      "QLayout"
    ],
    "group": "QLayout",
    "description": "<p>We will be talking about encapsulating pages within a QLayout. If you haven’t already, please read <doc-link to=\"/layout/layout\">QLayout</doc-link> documentation page first.</p>\n"
  },
  {
    "name": "QPageScroller",
    "imports": [
      "QPageSticky"
    ],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QPageScroller",
    "description": "<p>The QPageScroller component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls.\nThe great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or drawer(s), even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won’t occur.\nTry it out with a non-fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won’t overlap with the footer.\nEssentially QPageScroller is very similar to QPageSticky. Whereas a QPageSticky componet is always visible a QPageScroller component only appears after a <code class=\"doc-token\">scroll-offset</code> (property) is reached. Once visible, the user can click on it to quickly get back to the top of the page via <code class=\"doc-token\">duration</code> property.</p>\n"
  },
  {
    "name": "QPageSticky",
    "imports": [],
    "related": [
      "QLayout",
      "QPage",
      "QPageContainer"
    ],
    "group": "QLayout",
    "description": "<p>The QPageSticky component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls.\nThe great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or drawer(s), even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won’t occur.\nTry it out with a non-fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won’t overlap with the footer.</p>\n"
  },
  {
    "name": "QPagination",
    "imports": [
      "QBtn",
      "QInput"
    ],
    "related": [],
    "group": "QPagination",
    "description": "<p>The QPagination component is available for whenever a pagination system is required. It offers the user a simple UI for moving between items or pages.\nThere are two modes in which QPagination operates: with buttons only or with an inputbox. The latter allows the user to go to a specific page by clicking/tapping on the inputbox, typing the page number then hitting Enter key. If the new page number is within valid limits, the model will be changed accordingly.</p>\n"
  },
  {
    "name": "QParallax",
    "imports": [],
    "related": [
      "QVideo"
    ],
    "group": "QParallax",
    "description": "<p>Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion.\nQParallax takes care of a lot of quirks, including image/video size which can actually be smaller than the window width/height.</p>\n"
  },
  {
    "name": "QPopupEdit",
    "imports": [
      "QMenu",
      "QBtn"
    ],
    "related": [
      "QInput",
      "QMenu"
    ],
    "group": "QPopupEdit",
    "description": "<p>The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield.\nThis component injects a <doc-link to=\"/vue-components/menu\">QMenu</doc-link> into its parent DOM element and enables the behavior described above, so <strong>it can be used anywhere</strong>, not only in QTable.</p>\n"
  },
  {
    "name": "QPopupProxy",
    "imports": [
      "QDialog",
      "QMenu"
    ],
    "related": [
      "QMenu",
      "QDialog",
      "ClosePopup"
    ],
    "group": "QPopupProxy",
    "description": "<p>QPopupProxy should be used when you need either a <doc-link to=\"/vue-components/menu\">QMenu</doc-link> (on bigger screens) or a <doc-link to=\"/vue-components/dialog\">QDialog</doc-link> (on smaller screens) to be displayed. It acts as a proxy which picks between what of the two components to use. QPopupProxy also handles context-menus.</p>\n"
  },
  {
    "name": "QPullToRefresh",
    "imports": [
      "QIcon",
      "QSpinner",
      "TouchPan"
    ],
    "related": [
      "QInfiniteScroll",
      "QIcon"
    ],
    "group": "QPullToRefresh",
    "description": "<p>The QPullToRefresh is a component that allows the user to pull down in order to refresh page content (or retrieve the newest content).</p>\n"
  },
  {
    "name": "QRadio",
    "imports": [],
    "related": [
      "QOptionGroup",
      "QBtnToggle",
      "QCheckbox",
      "QToggle"
    ],
    "group": "QRadio",
    "description": "<p>The QRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.</p>\n"
  },
  {
    "name": "QRange",
    "imports": [],
    "related": [
      "QSlider",
      "QField"
    ],
    "group": "QRange",
    "description": "<p>The QRange component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values. An example use case for the Range component would be to offer a price range selection.\nAlso check out its “sibling”, the <doc-link to=\"/vue-components/slider\">QSlider</doc-link> component.</p>\n"
  },
  {
    "name": "QRating",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QRating",
    "description": "<p>Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”.</p>\n"
  },
  {
    "name": "QResizeObserver",
    "imports": [],
    "related": [
      "QScrollObserver"
    ],
    "group": "QObserver",
    "description": "<p>QResizeObserver is a Quasar component that emits a <code class=\"doc-token\">resize</code> event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too.</p>\n"
  },
  {
    "name": "QRouteTab",
    "imports": [
      "QTab"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "description": "<p>Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to <doc-link to=\"/layout/layout\">Layouts</doc-link> and <doc-link to=\"/layout/header-and-footer#Example--Playing-with-QTabs\">Header &amp; Footer</doc-link> for references.</p>\n"
  },
  {
    "name": "QScrollArea",
    "imports": [
      "QResizeObserver",
      "QScrollObserver",
      "TouchPan"
    ],
    "related": [
      "QDrawer"
    ],
    "group": "QScrollArea",
    "description": "<p>The QScrollArea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has <code class=\"doc-token\">overflow: auto</code>, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.\nThis is especially useful for desktop as scrollbars are hidden on a mobile device. When on a mobile device, QScrollArea simply wraps the content in a <code class=\"doc-token\">&lt;div&gt;</code> configured for default browser scrolling.</p>\n"
  },
  {
    "name": "QScrollObserver",
    "imports": [],
    "related": [
      "QResizeObserver"
    ],
    "group": "QObserver",
    "description": "<p>QScrollObserver is a Quasar component that emits a <code class=\"doc-token\">scroll</code> event whenever the user scrolls the page or overflowed container with <code class=\"doc-token\">.scroll</code> CSS class applied to it.</p>\n"
  },
  {
    "name": "QSelect",
    "imports": [
      "QField",
      "QIcon",
      "QChip",
      "QItem",
      "QItemSection",
      "QItemLabel",
      "QMenu",
      "QDialog"
    ],
    "related": [],
    "group": "QSelect",
    "description": "<p>The QSelect component has two types of selection: single or multiple. This component opens up a Popover for the selection list and action. A filter can also be used for longer lists.\nIn case you are looking for a dropdown “button” instead of “input” use <doc-link to=\"/vue-components/button-dropdown\">Button Dropdown</doc-link> instead.</p>\n"
  },
  {
    "name": "QSeparator",
    "imports": [],
    "related": [],
    "group": "QSeparator",
    "description": "<p>The QSeparator Component is used to separate sections of text, other components, etc… It creates a colored line across the width of the parent. It can be horizontal or vertical.</p>\n"
  },
  {
    "name": "QSlideItem",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QItem",
      "QItemLabel",
      "QItemSection",
      "QList",
      "QExpansionItem"
    ],
    "group": "QList",
    "description": "<p>The QSlideItem component is essentially a <doc-link to=\"/vue-components/list-and-list-items\">QItem</doc-link> with two additional slots (<code class=\"doc-token\">left</code> and <code class=\"doc-token\">right</code>) which allows user to drag the item (through mouse or with the finger on a touch device) to one of the sides in order to apply a specific action.</p>\n"
  },
  {
    "name": "QSlider",
    "imports": [],
    "related": [
      "QRange",
      "QField"
    ],
    "group": "QSlider",
    "description": "<p>The QSlider is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider.\nAlso check its “sibling”, the <doc-link to=\"/vue-components/range\">QRange</doc-link> component.</p>\n"
  },
  {
    "name": "QSlideTransition",
    "imports": [],
    "related": [
      "QExpansionItem"
    ],
    "group": "QSlideTransition",
    "description": "<p>QSlideTransition slides the DOM element (or component) up or down, based on its visibility: works alongside <code class=\"doc-token\">v-show</code> and <code class=\"doc-token\">v-if</code> on a single element, similar to Vue’s Transition component with the only difference being that it’s not a group transition too (it only applies to one DOM element or component).</p>\n"
  },
  {
    "name": "QSpinner",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerAudio",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerBall",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerBars",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerComment",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerCube",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerDots",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerFacebook",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerGears",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerGrid",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerHearts",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerHourglass",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerInfinity",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerIos",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerOval",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerPie",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerPuff",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerRadio",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerRings",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSpinnerTail",
    "imports": [],
    "related": [
      "QLinearProgress",
      "QCircularProgress",
      "QInnerLoading",
      "Loading",
      "LoadingBar"
    ],
    "group": "QSpinner",
    "description": "<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.</p>\n"
  },
  {
    "name": "QSplitter",
    "imports": [
      "TouchPan"
    ],
    "related": [
      "QExpansionItem",
      "QSlideItem",
      "QSeparator"
    ],
    "group": "QSplitter",
    "description": "<p>The QSplitter component allow containers to be split vertically and/or horizontally through a draggable separator bar.</p>\n"
  },
  {
    "name": "QStep",
    "imports": [
      "QSlideTransition"
    ],
    "related": [],
    "group": "QStepper",
    "description": "<p>A Stepper conveys progress through numbered steps. Steppers display progress\nthrough a sequence of logical and numbered steps. They may also be used for\nnavigation. It’s usually useful when the user has to follow steps to complete a\nprocess, like in a <doc-link to=\"https://en.wikipedia.org/wiki/Wizard_(software)\">wizard</doc-link>.</p>\n"
  },
  {
    "name": "QTab",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "description": "<p>Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to <doc-link to=\"/layout/layout\">Layouts</doc-link> and <doc-link to=\"/layout/header-and-footer#Example--Playing-with-QTabs\">Header &amp; Footer</doc-link> for references.</p>\n"
  },
  {
    "name": "QTable",
    "imports": [],
    "related": [
      "QMarkupTable",
      "QPagination"
    ],
    "group": "QTable",
    "description": "<p>QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:</p>\n<ul>\n<li>Filtering</li>\n<li>Sorting</li>\n<li>Single / Multiple rows selection with custom selection actions</li>\n<li>Pagination (including server-side if required)</li>\n<li>Grid mode (you can use for example QCards to display data in a non-tabular manner)</li>\n<li>Total customization of rows and cells through scoped slots</li>\n<li>Ability to add additional row(s) at top or bottom of data rows</li>\n<li>Column picker (through QTableColumns component described in one of the sections)</li>\n<li>Custom top and/or bottom Table controls</li>\n<li>Responsive design</li>\n</ul>\n"
  },
  {
    "name": "QTabPanel",
    "imports": [],
    "related": [
      "QRouteTab",
      "QTab",
      "QTabs"
    ],
    "group": "QTabPanels",
    "description": "<p>Tab panels are a way of displaying more information using less window real estate.</p>\n"
  },
  {
    "name": "QTabPanels",
    "imports": [],
    "related": [
      "QRouteTab",
      "QTab",
      "QTabs"
    ],
    "group": "QTabPanels",
    "description": "<p>Tab panels are a way of displaying more information using less window real estate.</p>\n"
  },
  {
    "name": "QTabs",
    "imports": [
      "QIcon",
      "QResizeObserver"
    ],
    "related": [
      "QTabPanel",
      "QTabPanels",
      "QBtnToggle",
      "QIcon",
      "QBadge"
    ],
    "group": "QTabs",
    "description": "<p>Tabs are a way of displaying more information using less window real estate. This page describes the tab selection part through QTabs, QTab and QRouteTab.\nOne common use case for this component is in Layout’s header/footer. Please refer to <doc-link to=\"/layout/layout\">Layouts</doc-link> and <doc-link to=\"/layout/header-and-footer#Example--Playing-with-QTabs\">Header &amp; Footer</doc-link> for references.</p>\n"
  },
  {
    "name": "QTd",
    "imports": [],
    "related": [
      "QMarkupTable",
      "QPagination"
    ],
    "group": "QTable",
    "description": "<p>QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:</p>\n<ul>\n<li>Filtering</li>\n<li>Sorting</li>\n<li>Single / Multiple rows selection with custom selection actions</li>\n<li>Pagination (including server-side if required)</li>\n<li>Grid mode (you can use for example QCards to display data in a non-tabular manner)</li>\n<li>Total customization of rows and cells through scoped slots</li>\n<li>Ability to add additional row(s) at top or bottom of data rows</li>\n<li>Column picker (through QTableColumns component described in one of the sections)</li>\n<li>Custom top and/or bottom Table controls</li>\n<li>Responsive design</li>\n</ul>\n"
  },
  {
    "name": "QTh",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QMarkupTable",
      "QPagination"
    ],
    "group": "QTable",
    "description": "<p>QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:</p>\n<ul>\n<li>Filtering</li>\n<li>Sorting</li>\n<li>Single / Multiple rows selection with custom selection actions</li>\n<li>Pagination (including server-side if required)</li>\n<li>Grid mode (you can use for example QCards to display data in a non-tabular manner)</li>\n<li>Total customization of rows and cells through scoped slots</li>\n<li>Ability to add additional row(s) at top or bottom of data rows</li>\n<li>Column picker (through QTableColumns component described in one of the sections)</li>\n<li>Custom top and/or bottom Table controls</li>\n<li>Responsive design</li>\n</ul>\n"
  },
  {
    "name": "QTime",
    "imports": [
      "QBtn",
      "TouchPan"
    ],
    "related": [
      "QDate",
      "QField"
    ],
    "group": "QDatetime",
    "description": "<p>The QTime component provides a method to input time.</p>\n"
  },
  {
    "name": "QTimelineEntry",
    "imports": [
      "QIcon"
    ],
    "related": [],
    "group": "QTimeline",
    "description": "<p>The QTimeline component displays a list of events in chronological order. It is typically a graphic design showing a long bar labelled with dates alongside itself and usually events. Timelines can use any time scale, depending on the subject and data.\nQTimeline has 3 layouts:</p>\n<ul>\n<li><code class=\"doc-token\">dense</code> (default) is showing headings, titles, subtitles and content on the <strong>timeline-specified side</strong> of the time line (default on right)</li>\n<li><code class=\"doc-token\">comfortable</code> is showing headings, titles and content on the <strong>timeline-specified side</strong> of the time line (default on right) and the subtitles on the other side</li>\n<li><code class=\"doc-token\">loose</code> is showing headings on center, titles and content on the <strong>entry-specified side</strong> of the time line (default on right) and the subtitles on the other side</li>\n</ul>\n"
  },
  {
    "name": "QToggle",
    "imports": [
      "QIcon"
    ],
    "related": [
      "QCheckbox",
      "QOptionGroup",
      "QRadio",
      "QBtnToggle"
    ],
    "group": "QToggle",
    "description": "<p>The QToggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off.</p>\n"
  },
  {
    "name": "QToolbar",
    "imports": [],
    "related": [
      "QFooter",
      "QHeader",
      "QIcon",
      "QAvatar",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QSeparator"
    ],
    "group": "QToolbar",
    "description": "<p>QToolbar is a component usually part of Layout Header and Footer, but it can be used anywhere on the page.</p>\n"
  },
  {
    "name": "QToolbarTitle",
    "imports": [],
    "related": [
      "QFooter",
      "QHeader",
      "QIcon",
      "QAvatar",
      "QBreadcrumbs",
      "QBreadcrumbsEl",
      "QSeparator"
    ],
    "group": "QToolbar",
    "description": "<p>QToolbar is a component usually part of Layout Header and Footer, but it can be used anywhere on the page.</p>\n"
  },
  {
    "name": "QTooltip",
    "imports": [],
    "related": [
      "QMenu"
    ],
    "group": "QTooltip",
    "description": "<p>The QTooltip component is to be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear.</p>\n"
  },
  {
    "name": "QTr",
    "imports": [],
    "related": [
      "QMarkupTable",
      "QPagination"
    ],
    "group": "QTable",
    "description": "<p>QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:</p>\n<ul>\n<li>Filtering</li>\n<li>Sorting</li>\n<li>Single / Multiple rows selection with custom selection actions</li>\n<li>Pagination (including server-side if required)</li>\n<li>Grid mode (you can use for example QCards to display data in a non-tabular manner)</li>\n<li>Total customization of rows and cells through scoped slots</li>\n<li>Ability to add additional row(s) at top or bottom of data rows</li>\n<li>Column picker (through QTableColumns component described in one of the sections)</li>\n<li>Custom top and/or bottom Table controls</li>\n<li>Responsive design</li>\n</ul>\n"
  },
  {
    "name": "QTree",
    "imports": [
      "QIcon",
      "QCheckbox",
      "QSlideTransition",
      "QSpinner"
    ],
    "related": [],
    "group": "QTree",
    "description": "<p>Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure.</p>\n"
  },
  {
    "name": "QUploader",
    "imports": [
      "QBtn",
      "QIcon",
      "QSpinner",
      "QCircularProgress"
    ],
    "related": [],
    "group": "QUploader",
    "description": "<p>Quasar supplies a way for you to upload files through the QUploader component.</p>\n"
  },
  {
    "name": "QVideo",
    "imports": [],
    "related": [],
    "group": "QVideo",
    "description": "<p>Using the QVideo component makes embedding a video like Youtube easy. It also resizes to fit the container by default.</p>\n"
  },
  {
    "name": "Scroll",
    "imports": [],
    "related": [
      "ScrollFire",
      "QScrollObserver"
    ],
    "description": "<p>This is a Vue directive which takes one parameter (a Function) and fires when user scrolls the page containing that DOM node.</p>\n"
  },
  {
    "name": "ScrollFire",
    "imports": [],
    "related": [
      "Scroll"
    ],
    "description": "<p>“Scroll Fire” is a directive that enables a method to be called (once and only once) when user scrolls current page and the DOM element (or component) that it is applied to comes into the viewport.</p>\n"
  },
  {
    "name": "TouchHold",
    "imports": [],
    "related": [
      "TouchPan",
      "TouchSwipe"
    ],
    "description": "<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code class=\"doc-token\">v-touch-pan</code>, <code class=\"doc-token\">v-touch-swipe</code>, <code class=\"doc-token\">v-touch-hold</code> and even <code class=\"doc-token\">v-touch-repeat</code>.</p>\n<blockquote class=\"doc-note\">\n<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.\nWe will be describing <code class=\"doc-token\">v-touch-hold</code> on the lines below.</p>\n</blockquote>\n"
  },
  {
    "name": "TouchPan",
    "imports": [],
    "related": [
      "TouchSwipe",
      "TouchHold"
    ],
    "description": "<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code class=\"doc-token\">v-touch-pan</code>, <code class=\"doc-token\">v-touch-swipe</code>, <code class=\"doc-token\">v-touch-hold</code> and even <code class=\"doc-token\">v-touch-repeat</code>.</p>\n<blockquote class=\"doc-note\">\n<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.\nWe will be describing <code class=\"doc-token\">v-touch-pan</code> on the lines below.</p>\n</blockquote>\n"
  },
  {
    "name": "TouchSwipe",
    "imports": [],
    "related": [
      "TouchPan",
      "TouchHold"
    ],
    "description": "<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code class=\"doc-token\">v-touch-pan</code>, <code class=\"doc-token\">v-touch-swipe</code>, <code class=\"doc-token\">v-touch-hold</code> and even <code class=\"doc-token\">v-touch-repeat</code>.</p>\n<blockquote class=\"doc-note\">\n<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.\nWe will be describing <code class=\"doc-token\">v-touch-swipe</code> on the lines below.</p>\n</blockquote>\n"
  }
]