{
  "mixins": [ "components/field/__QField" ],

  "props": {
    "maxlength": {
      "type": [ "String", "Number" ],
      "desc": "Specify a max length of model",
      "examples": [ "12" ],
      "category": "model"
    },

    "item-aligned": {
      "type": "Boolean",
      "desc": "Match inner content alignments to QItem",
      "category": "style"
    }
  },

  "scopedSlots": {
    "control": {
      "desc": "Slot for controls; Suggestion QSlider, QRange, QKnob, ...",
      "scope": {
        "id": {
          "type": "String",
          "desc": "Element id used in the `for` attribute of the field label. Can be used to link the control to the label",
          "examples": [ "qf_363270c0-7a83-62b1-8dcf-6dfd64ee38fa" ]
        },
        "field": {
          "type": "Object",
          "desc": "DOM element of the field",
          "__exemption": [ "examples" ]
        },
        "editable": {
          "type": "Boolean",
          "desc": "Field is editable"
        },
        "focused": {
          "type": "Boolean",
          "desc": "Field has focus"
        },
        "floatingLabel": {
          "type": "Boolean",
          "desc": "Field's label is floating"
        },
        "value": {
          "type": "Any",
          "desc": "Field's value",
          "examples": [ 0.241, "Text" ]
        },
        "emitValue": {
          "type": "Function",
          "desc": "Function that emits an @input event in the context of the field",
          "params": {
            "value": {
              "type": "Any",
              "desc": "Value to be emited",
              "examples": [ 0, "Changed text" ]
            }
          },
          "returns": null
        }
      }
    }
  },

  "events": {
    "input": {
      "extends": "input",
      "desc": "Emitted when the model changes, only when used with 'clearable' or the 'control' scoped slot."
    },

    "focus": {
      "desc": "Emitted when component gets focused",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    },

    "blur": {
      "desc": "Emitted when component loses focus",
      "params": {
        "evt": {
          "type": "Object",
          "desc": "JS event object",
          "__exemption": [ "examples" ]
        }
      }
    }
  },

  "methods": {
    "focus": {
      "desc": "Focus field"
    },

    "blur": {
      "desc": "Blur field (lose focus)"
    }
  },
  "css": {
    "field-transition": {
      "desc": "QField's animation transition",
      "type": "Transition",
      "category": "Animation",
      "affects": [{
        "selector": ".q-field__prefix, .q-field__suffix",
        "property": "transition",
        "template": "opacity $value"
      }, {
        "selector": ".q-field__label",
        "property": "transition",
        "template": "transform $value, right $value"
      }, {
        "selector": ".q-field--filled:before",
        "property": "transition",
        "template": "opacity $value, background $value"
      }, {
        "selector": ".q-field--filled:after",
        "property": "transition",
        "template": "transform $value"
      }, {
        "selector": ".q-field--outlined:before, .q-field--outlined:after",
        "property": "transition",
        "template": "border-color $value"
      }, {
        "selector": ".q-field--standard .q-field__control:before",
        "property": "transition",
        "template": "border-color $value"
      }, {
        "selector": ".q-field--standard .q-field__control:after",
        "property": "transition",
        "template": "transition $value"
      }, {
        "selector": ".q-field--standout .q-field__control",
        "property": "transition",
        "template": "box-shadow $value, background-color $value"
      }, {
        "selector": ".q-field--standout .q-field__control:before",
        "property": "transition",
        "template": "opacity $value, background $value"
      }]
    },
    "input-autofill-color": {
      "desc": "QField's color on browser's autocomplete mode",
      "type": "Color"
    },
    "input-font-size": {
      "desc": "QField's font size",
      "type": "Size",
      "value": {
        "size": 14,
        "unit": "px"
      },
      "category": "Typography",
      "affects": [{
        "selector": ".q-field",
        "property": "font-size"
      }]
    },
    "primary": {
      "desc": "QField's control text color",
      "extends": "primary",
      "affects": [{
        "selector": ".q-field__control",
        "property": "color"
      }]
    },
    "input-text-color": {
      "desc": "QField's content, prefix and suffix text color",
      "type": "Color",
      "affects": [{
        "selector": ".q-field__native, .q-field__prefix, .q-field__suffix",
        "property": "color"
      }]
    },
    "input-label-color": {
      "desc": "QField's label text color",
      "type": "Color",
      "affects": [{
        "selector": ".q-field__label",
        "property": "color"
      }]
    },
    "generic-border-radius": {
      "desc": "QField's border radius on standout, outlined and filled styles",
      "extends": "generic-border-radius",
      "affects": [{
        "selector": ".q-field--filled .q-field__control",
        "property": "border-radius",
        "template": "$value $value 0 0"
      }, {
        "selector": ".q-field--outlined .q-field__control, .q-field--standout .q-field__control",
        "property": "border-radius"
      }]
    },
    "shadow-2": {
      "desc": "QField's control focused shadow when using the \"standout\" prop",
      "extends": "shadow-2",
      "affects": [{
        "selector": ".q-field--standout.q-field--focused .q-field__control",
        "property": "box-shadow"
      }]
    },
    "negative": {
      "desc": "QField's error color",
      "extends": "negative",
      "affects": [{
        "selector": ".q-field--error .q-field__bottom",
        "property": "color"
      }]
    }
  }
}
